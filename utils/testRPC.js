const { ethers } = require('ethers');
const rpcConfig = require('./RPC.json');
const fallbackRpcConfig = require('./fallbackRPC.json');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ü–≤–µ—Ç–∞–º–∏
function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ RPC
async function testRPC(chainId, chainName, rpcUrl, isMain = false) {
  const rpcType = isMain ? '–û–°–ù–û–í–ù–û–ô' : 'FALLBACK';
  
  try {
    log(`   üì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${rpcType} RPC: ${rpcUrl}`, 'cyan');
    
    const provider = new ethers.JsonRpcProvider(rpcUrl);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    const networkPromise = provider.getNetwork();
    const timeoutPromise = new Promise((_, reject) => 
      setTimeout(() => reject(new Error('Timeout (5s)')), 5000)
    );
    
    const network = await Promise.race([networkPromise, timeoutPromise]);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ chainId —Å–æ–≤–ø–∞–¥–∞–µ—Ç
    if (network.chainId === BigInt(chainId)) {
      log(`   ‚úÖ ${rpcType} RPC –†–ê–ë–û–¢–ê–ï–¢ - Chain: ${network.name} (${network.chainId})`, 'green');
      return { success: true, network: network.name, chainId: network.chainId };
    } else {
      log(`   ‚ö†Ô∏è  ${rpcType} RPC –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô CHAIN_ID - –û–∂–∏–¥–∞–ª—Å—è: ${chainId}, –ü–æ–ª—É—á–µ–Ω: ${network.chainId}`, 'yellow');
      return { success: false, error: 'Wrong chain ID' };
    }
    
  } catch (error) {
    log(`   ‚ùå ${rpcType} RPC –ù–ï –†–ê–ë–û–¢–ê–ï–¢ - ${error.message}`, 'red');
    return { success: false, error: error.message };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö RPC –¥–ª—è –æ–¥–Ω–æ–π —Å–µ—Ç–∏
async function testChainRPCs(chainId, chainName) {
  log(`\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏: ${chainName.toUpperCase()} (Chain ID: ${chainId})`, 'bright');
  
  const results = {
    chainId,
    chainName,
    mainRpc: null,
    fallbackRpcs: [],
    workingRpc: null
  };
  
  // –ù–∞—Ö–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π RPC
  const mainRpcConfig = rpcConfig.rpc.find(item => item.chainId === chainId);
  if (mainRpcConfig) {
    log(`\nüì° –û—Å–Ω–æ–≤–Ω–æ–π RPC:`, 'blue');
    const mainResult = await testRPC(chainId, chainName, mainRpcConfig.httpRpcUrl, true);
    results.mainRpc = {
      url: mainRpcConfig.httpRpcUrl,
      ...mainResult
    };
    
    if (mainResult.success) {
      results.workingRpc = mainRpcConfig.httpRpcUrl;
    }
  } else {
    log(`\n‚ùå –û—Å–Ω–æ–≤–Ω–æ–π RPC –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏`, 'red');
  }
  
  // –ù–∞—Ö–æ–¥–∏–º fallback RPC
  const fallbackConfig = fallbackRpcConfig.fallbackRPC.find(item => item.chainId === chainId);
  if (fallbackConfig && fallbackConfig.fallbackUrls) {
    log(`\nüîÑ Fallback RPC (${fallbackConfig.fallbackUrls.length}):`, 'blue');
    
    for (let i = 0; i < fallbackConfig.fallbackUrls.length; i++) {
      const fallbackUrl = fallbackConfig.fallbackUrls[i];
      const fallbackResult = await testRPC(chainId, chainName, fallbackUrl, false);
      
      results.fallbackRpcs.push({
        url: fallbackUrl,
        ...fallbackResult
      });
      
      // –ï—Å–ª–∏ –µ—â–µ –Ω–µ—Ç —Ä–∞–±–æ—á–µ–≥–æ RPC –∏ —ç—Ç–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
      if (!results.workingRpc && fallbackResult.success) {
        results.workingRpc = fallbackUrl;
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
      if (i < fallbackConfig.fallbackUrls.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 500));
      }
    }
  } else {
    log(`\n‚ö†Ô∏è  Fallback RPC –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏`, 'yellow');
  }
  
  // –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å–µ—Ç–∏
  if (results.workingRpc) {
    log(`\n‚úÖ ${chainName.toUpperCase()}: –ï–°–¢–¨ –†–ê–ë–û–ß–ò–ô RPC`, 'green');
  } else {
    log(`\n‚ùå ${chainName.toUpperCase()}: –ù–ï–¢ –†–ê–ë–û–ß–ò–• RPC`, 'red');
  }
  
  return results;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function getStatistics(allResults) {
  const stats = {
    totalChains: allResults.length,
    chainsWithWorkingRpc: 0,
    chainsWithOnlyMainRpc: 0,
    chainsWithOnlyFallbackRpc: 0,
    chainsWithNoRpc: 0,
    totalMainRpcs: 0,
    workingMainRpcs: 0,
    totalFallbackRpcs: 0,
    workingFallbackRpcs: 0
  };
  
  allResults.forEach(result => {
    // –ü–æ–¥—Å—á–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö RPC
    if (result.mainRpc) {
      stats.totalMainRpcs++;
      if (result.mainRpc.success) {
        stats.workingMainRpcs++;
      }
    }
    
    // –ü–æ–¥—Å—á–µ—Ç fallback RPC
    stats.totalFallbackRpcs += result.fallbackRpcs.length;
    result.fallbackRpcs.forEach(fallback => {
      if (fallback.success) {
        stats.workingFallbackRpcs++;
      }
    });
    
    // –ü–æ–¥—Å—á–µ—Ç —Å–µ—Ç–µ–π
    if (result.workingRpc) {
      stats.chainsWithWorkingRpc++;
      
      if (result.mainRpc && result.mainRpc.success) {
        stats.chainsWithOnlyMainRpc++;
      } else if (result.fallbackRpcs.some(f => f.success)) {
        stats.chainsWithOnlyFallbackRpc++;
      }
    } else {
      stats.chainsWithNoRpc++;
    }
  });
  
  return stats;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RPC –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ç–µ–π...', 'bright');
  log('‚è±Ô∏è  –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:', new Date().toLocaleString(), 'cyan');
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ chainId –∏–∑ –æ–±–µ–∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
  const allChainIds = new Set();
  
  // –î–æ–±–∞–≤–ª—è–µ–º chainId –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ RPC
  rpcConfig.rpc.forEach(item => allChainIds.add(item.chainId));
  
  // –î–æ–±–∞–≤–ª—è–µ–º chainId –∏–∑ fallback RPC
  fallbackRpcConfig.fallbackRPC.forEach(item => allChainIds.add(item.chainId));
  
  const sortedChainIds = Array.from(allChainIds).sort((a, b) => a - b);
  
  log(`\nüìä –ù–∞–π–¥–µ–Ω–æ ${sortedChainIds.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`, 'bright');
  
  const allResults = [];
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å–µ—Ç—å
  for (let i = 0; i < sortedChainIds.length; i++) {
    const chainId = sortedChainIds[i];
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–µ—Ç–∏
    const mainRpcConfig = rpcConfig.rpc.find(item => item.chainId === chainId);
    const fallbackConfig = fallbackRpcConfig.fallbackRPC.find(item => item.chainId === chainId);
    
    const chainName = mainRpcConfig?.name || fallbackConfig?.name || `Chain_${chainId}`;
    
    log(`\n${'='.repeat(60)}`, 'magenta');
    log(`–¢–µ—Å—Ç ${i + 1}/${sortedChainIds.length}`, 'bright');
    
    const result = await testChainRPCs(chainId, chainName);
    allResults.push(result);
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–µ—Ç—è–º–∏
    if (i < sortedChainIds.length - 1) {
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  }
  
  // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  log(`\n${'='.repeat(60)}`, 'magenta');
  log('üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê', 'bright');
  log(`${'='.repeat(60)}`, 'magenta');
  
  const stats = getStatistics(allResults);
  
  log(`\nüåê –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`, 'blue');
  log(`   –í—Å–µ–≥–æ —Å–µ—Ç–µ–π: ${stats.totalChains}`, 'cyan');
  log(`   –°–µ—Ç–µ–π —Å —Ä–∞–±–æ—á–∏–º–∏ RPC: ${stats.chainsWithWorkingRpc}`, 'green');
  log(`   –°–µ—Ç–µ–π –±–µ–∑ —Ä–∞–±–æ—á–∏—Ö RPC: ${stats.chainsWithNoRpc}`, 'red');
  
  log(`\nüì° –û—Å–Ω–æ–≤–Ω—ã–µ RPC:`, 'blue');
  log(`   –í—Å–µ–≥–æ: ${stats.totalMainRpcs}`, 'cyan');
  log(`   –†–∞–±–æ—Ç–∞—é—â–∏—Ö: ${stats.workingMainRpcs}`, 'green');
  log(`   –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö: ${stats.totalMainRpcs > 0 ? ((stats.workingMainRpcs / stats.totalMainRpcs) * 100).toFixed(1) : 0}%`, 'cyan');
  
  log(`\nüîÑ Fallback RPC:`, 'blue');
  log(`   –í—Å–µ–≥–æ: ${stats.totalFallbackRpcs}`, 'cyan');
  log(`   –†–∞–±–æ—Ç–∞—é—â–∏—Ö: ${stats.workingFallbackRpcs}`, 'green');
  log(`   –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö: ${stats.totalFallbackRpcs > 0 ? ((stats.workingFallbackRpcs / stats.totalFallbackRpcs) * 100).toFixed(1) : 0}%`, 'cyan');
  
  // –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–µ—Ç–∏
  const problematicChains = allResults.filter(result => !result.workingRpc);
  if (problematicChains.length > 0) {
    log(`\n‚ùå –ü–†–û–ë–õ–ï–ú–ù–´–ï –°–ï–¢–ò (–Ω–µ—Ç —Ä–∞–±–æ—á–∏—Ö RPC):`, 'red');
    problematicChains.forEach(result => {
      log(`   ${result.chainName.toUpperCase()} (Chain ID: ${result.chainId})`, 'red');
    });
  }
  
  // –í—ã–≤–æ–¥–∏–º —Å–µ—Ç–∏ —Ç–æ–ª—å–∫–æ —Å fallback RPC
  const fallbackOnlyChains = allResults.filter(result => 
    result.workingRpc && 
    (!result.mainRpc || !result.mainRpc.success) && 
    result.fallbackRpcs.some(f => f.success)
  );
  
  if (fallbackOnlyChains.length > 0) {
    log(`\n‚ö†Ô∏è  –°–ï–¢–ò –¢–û–õ–¨–ö–û –° FALLBACK RPC:`, 'yellow');
    fallbackOnlyChains.forEach(result => {
      const workingFallbacks = result.fallbackRpcs.filter(f => f.success);
      log(`   ${result.chainName.toUpperCase()}: ${workingFallbacks.length} fallback RPC`, 'yellow');
    });
  }
  
  log(`\n‚è±Ô∏è  –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:`, new Date().toLocaleString(), 'cyan');
  log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!', 'bright');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
main().catch(error => {
  log(`\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'red');
  process.exit(1);
}); 