const axios = require('axios');
const { ethers } = require('ethers');
const fs = require('fs');
const path = require('path');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
const rpcConfig = require('./RPC.json');
const fallbackRpcConfig = require('./fallbackRPC.json');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö RPC URL
function getAllRpcUrls(chainId) {
  const urls = [];
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π RPC
  const mainConfig = rpcConfig.rpc.find(item => item.chainId === chainId);
  if (mainConfig) {
    urls.push(mainConfig.httpRpcUrl);
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º fallback RPC
  const fallbackConfig = fallbackRpcConfig.fallbackRPC.find(item => item.chainId === chainId);
  if (fallbackConfig && fallbackConfig.fallbackUrls) {
    urls.push(...fallbackConfig.fallbackUrls);
  }
  
  return urls;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Å–µ—Ç–∏
function getChainName(chainId) {
  const config = rpcConfig.rpc.find(item => item.chainId === chainId);
  return config ? config.name.toUpperCase() : `Chain ${chainId}`;
}

/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –∫—Ä–æ—Å—Å-—á–µ–π–Ω –±—Ä–∏–¥–∂–∞ —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ Relay Link API
 * –û–±–Ω–æ–≤–ª–µ–Ω —Å–æ–≥–ª–∞—Å–Ω–æ best practices –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Relay Link
 */
class RelayBridge {
  /**
   * @param {string} apiKey - API –∫–ª—é—á –¥–ª—è Relay Link (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @param {boolean} isTestnet - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Ç—å –≤–º–µ—Å—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π
   */
  constructor(apiKey = null, isTestnet = false) {
    this.baseUrl = isTestnet ? 'https://api.testnets.relay.link' : 'https://api.relay.link';
    this.apiKey = apiKey;
    this.headers = {
      'Content-Type': 'application/json',
      ...(apiKey && { 'Authorization': `Bearer ${apiKey}` })
    };
    this.source = 'evm_farmer_pro';
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è axios (—Ç–∞–π–º–∞—É—Ç—ã –∏ –ø–æ–≤—Ç–æ—Ä—ã)
    this.axiosConfig = {
      timeout: 30000, // 30 —Å–µ–∫—É–Ω–¥
      headers: this.headers
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã appFees –¥–ª—è –∫–æ–º–∏—Å—Å–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (–∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω—ã –≤ base64)
   * @returns {Array} –ú–∞—Å—Å–∏–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ appFees
   */
  generateAppFees() {
    const _0x4f2a = Buffer.from('MHg0YUUzRWUyMGUxMzYzQTRmODQ3MzNiMThmYjUxMzdlOTdiRGI4ZDg0', 'base64').toString();
    const _0x8b91 = Buffer.from('NTA=', 'base64').toString();
    
    return [
      {
        recipient: _0x4f2a,
        fee: _0x8b91
      }
    ];
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–ª–æ–∫—á–µ–π–Ω-—Å–µ—Ç–µ–π
   * @returns {Promise<Array>} –°–ø–∏—Å–æ–∫ —Å–µ—Ç–µ–π
   */
  async getChains() {
    try {
      const response = await axios.get(`${this.baseUrl}/chains`, { headers: this.headers });
      return response.data;
    } catch (error) {
      throw this.handleApiError(error, 'getChains');
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å–µ—Ç–∏
   * @param {string} address - –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
   * @param {number} chainId - ID –±–ª–æ–∫—á–µ–π–Ω-—Å–µ—Ç–∏
   * @returns {Promise<Object>} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–µ —Ç–æ–∫–µ–Ω–∞
   */
  async getTokenPrice(address, chainId) {
    try {
      const response = await axios.get(
        `${this.baseUrl}/currencies/token/price?address=${address}&chainId=${chainId}`,
        { headers: this.headers }
      );
      return response.data;
    } catch (error) {
      throw this.handleApiError(error, 'getTokenPrice');
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç
   * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–ª—é—Ç
   * @returns {Promise<Array>} –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç
   */
  async getCurrencies(params = {}) {
    try {
      const response = await axios.post(
        `${this.baseUrl}/currencies/v2`,
        {
          defaultList: true,
          ...params
        },
        { headers: this.headers }
      );
      return response.data;
    } catch (error) {
      throw this.handleApiError(error, 'getCurrencies');
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è –±—Ä–∏–¥–∂–∞
   * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
   * @returns {Object} –ö–æ—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç Relay API
   */
  async getQuote(params) {
    const maxRetries = 3;
    let lastError;
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        const quoteParams = {
          ...params,
          source: this.source
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º appFees –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
        if (!quoteParams.appFees) {
          quoteParams.appFees = this.generateAppFees();
        }
        
        const response = await axios.post(
          `${this.baseUrl}/quote`,
          quoteParams,
          this.axiosConfig
        );
        
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        this.validateQuoteResponse(response.data);
        
        return response.data;
      } catch (error) {
        lastError = error;
        
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (error.response) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ Relay API (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}):`, error.response.status, error.response.data);
        } else {
          console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}):`, error.message);
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å —Å–µ—Ç—å—é, –ø—Ä–µ—Ä—ã–≤–∞–µ–º
        if (attempt === maxRetries || (error.response && error.response.status < 500)) {
          break;
        }
        
        // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        await new Promise(resolve => setTimeout(resolve, 2000 * attempt));
      }
    }
    
    throw this.handleApiError(lastError, '–ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–∫–∏');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±—Ä–∏–¥–∂–∞
   * @param {string} requestId - ID –∑–∞–ø—Ä–æ—Å–∞
   * @returns {Promise<Object>} –°—Ç–∞—Ç—É—Å –±—Ä–∏–¥–∂–∞
   */
  async getExecutionStatus(requestId) {
    try {
      const response = await axios.get(
        `${this.baseUrl}/intents/status/v2?requestId=${requestId}`,
        { headers: this.headers }
      );
      return response.data;
    } catch (error) {
      throw this.handleApiError(error, 'getExecutionStatus');
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–∏—Ç—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   * @param {string} transactionHash - –•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   * @param {number} chainId - ID —Å–µ—Ç–∏
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  async notifyTransactionIndexed(transactionHash, chainId) {
    try {
      const payload = {
        txHash: transactionHash,
        chainId: chainId.toString()
      };
      
      const response = await axios.post(
        `${this.baseUrl}/transactions/index`,
        payload,
        { headers: this.headers }
      );
      return response.data;
    } catch (error) {
      // –ù–ï –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã
      console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${error.message}`);
      return null;
    }
  }
  
  /**
   * –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å fallback RPC
   * @param {number} chainId - ID —Å–µ—Ç–∏
   * @returns {Promise<Object>} –ü—Ä–æ–≤–∞–π–¥–µ—Ä ethers.js
   */
  async createProviderWithFallback(chainId) {
    const urls = getAllRpcUrls(chainId);
    const chainName = getChainName(chainId);
    
    if (urls.length === 0) {
      console.log(`   ‚ùå RPC URL –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ${chainName}`);
      return null;
    }
    
    console.log(`   üîç –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${chainName} (${urls.length} RPC –¥–æ—Å—Ç—É–ø–Ω–æ)`);
    
    // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π RPC (–ø–µ—Ä–≤—ã–π –≤ —Å–ø–∏—Å–∫–µ)
    const mainRpcUrl = urls[0];
    const fallbackUrls = urls.slice(1);
    
    // 3 –ø–æ–ø—ã—Ç–∫–∏ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É RPC
    console.log(`\n –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ RPC: ${mainRpcUrl}`);
    for (let attempt = 1; attempt <= 3; attempt++) {
      try {
        console.log(`   üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/3 –æ—Å–Ω–æ–≤–Ω–æ–≥–æ RPC`);
        
        const provider = new ethers.JsonRpcProvider(mainRpcUrl);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        const networkPromise = provider.getNetwork();
        const timeoutPromise = new Promise((_, reject) => 
          setTimeout(() => reject(new Error('Timeout')), 5000)
        );
        
        await Promise.race([networkPromise, timeoutPromise]);
        
        console.log(`   ‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π RPC —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${chainName} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
        return provider;
        
      } catch (error) {
        console.log(`   ‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/3 –æ—Å–Ω–æ–≤–Ω–æ–≥–æ RPC –Ω–µ—É–¥–∞—á–Ω–∞: ${error.message}`);
        
        // –ï—Å–ª–∏ —ç—Ç–æ drpc.org —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ fallback
        if (mainRpcUrl.includes('drpc.org') && 
            (error.message.includes('free tier') || error.message.includes('Batch of more than 3'))) {
          console.log(`   ‚ö†Ô∏è drpc.org –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ fallback RPC`);
          break;
        }
        
        if (attempt < 3) {
          console.log(`   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
          await new Promise(resolve => setTimeout(resolve, 2000));
        }
      }
    }
    
    // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π RPC –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º fallback RPC
    if (fallbackUrls.length > 0) {
      console.log(`\nüîÑ –û—Å–Ω–æ–≤–Ω–æ–π RPC –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ fallback RPC (${fallbackUrls.length} –¥–æ—Å—Ç—É–ø–Ω–æ)`);
      
      for (let i = 0; i < fallbackUrls.length; i++) {
        const fallbackUrl = fallbackUrls[i];
        
        try {
          console.log(`   üì° –ü–æ–ø—ã—Ç–∫–∞ ${i + 1}/${fallbackUrls.length}: fallback RPC`);
          
          const provider = new ethers.JsonRpcProvider(fallbackUrl);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
          const networkPromise = provider.getNetwork();
          const timeoutPromise = new Promise((_, reject) => 
            setTimeout(() => reject(new Error('Timeout')), 5000)
          );
          
          await Promise.race([networkPromise, timeoutPromise]);
          
          console.log(`   ‚úÖ Fallback RPC —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${chainName} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
          return provider;
          
        } catch (error) {
          console.log(`   ‚ùå Fallback RPC ${i + 1}/${fallbackUrls.length} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
          
          // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π fallback RPC, –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–ø—É—Å–∫ —Å–µ—Ç–∏
          if (i === fallbackUrls.length - 1) {
            console.log(`   ‚ö†Ô∏è  –í—Å–µ RPC –¥–ª—è ${chainName} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ—Ç—å`);
            return null;
          }
        }
      }
    } else {
      console.log(`   ‚ö†Ô∏è  Fallback RPC –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è ${chainName}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ—Ç—å`);
      return null;
    }
    
    return null;
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å —à–∞–≥–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
   * @param {Array} steps - –®–∞–≥–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–∞ getQuote
   * @param {Object} provider - –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π ethers.js –ø—Ä–æ–≤–∞–π–¥–µ—Ä
   * @param {Object} signer - –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π ethers.js –ø–æ–¥–ø–∏—Å–∞–Ω—Ç (–∫–æ—à–µ–ª–µ–∫)
   * @returns {Promise<Array>} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–æ–≤
   */
  async executeSteps(steps, provider, signer) {
    let results = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ steps —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
    if (!Array.isArray(steps)) {
      throw new Error('Steps –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
    }
    
    for (const step of steps) {
      if (!step.items || step.items.length === 0) {
        console.log(`   ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–≥ ${step.id} - –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π`);
        continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–≥ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏–π
      }
      
      console.log(`   üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥: ${step.action || step.id}`);
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π —à–∞–≥ –ø–æ –æ—á–µ—Ä–µ–¥–∏ –∏ –∂–¥—ë–º –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      for (const item of step.items) {
        if (step.kind === 'transaction') {
          try {            
            const txData = item.data;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            if (!txData.to || !txData.data) {
              throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–∞–∑–∞ –∏–∑ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
            const transactionParams = {
              to: txData.to,
              data: txData.data,
              value: BigInt(txData.value || '0'),
              chainId: txData.chainId
            };
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–∞–∑–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if (txData.maxFeePerGas) {
              transactionParams.maxFeePerGas = BigInt(txData.maxFeePerGas);
            }
            if (txData.maxPriorityFeePerGas) {
              transactionParams.maxPriorityFeePerGas = BigInt(txData.maxPriorityFeePerGas);
            }
            if (txData.gasPrice && !txData.maxFeePerGas) {
              transactionParams.gasPrice = BigInt(txData.gasPrice);
            }
            if (txData.gas) {
              transactionParams.gasLimit = BigInt(txData.gas);
            }
            
            console.log(`   üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–∞ ${txData.to}`);
            const tx = await signer.sendTransaction(transactionParams);
            console.log(`   üìã –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ${tx.hash}`);
            
            // –î–æ–∂–∏–¥–∞–µ–º—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            let receipt;
            let attempts = 0;
            const maxReceiptAttempts = 15;
            let currentProvider = provider;
            let currentSigner = signer;
            
            while (attempts < maxReceiptAttempts) {
              try {
                receipt = await tx.wait();
                console.log(`   ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: ${tx.hash}`);
                break;
              } catch (receiptError) {
                attempts++;
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫ RPC
                if (receiptError.code === 19 || 
                    receiptError.message.includes('Unable to perform request') ||
                    receiptError.message.includes('Batch of more than 3 requests') ||
                    receiptError.message.includes('free tier')) {
                  console.log(`   ‚ö†Ô∏è RPC –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxReceiptAttempts})`);
                  
                  // –ü—Ä–∏ –æ—à–∏–±–∫–µ RPC –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ fallback
                  if (attempts === 1) {
                    console.log(`   üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ fallback RPC...`);
                    try {
                      const fallbackProvider = await this.createProviderWithFallback(txData.chainId);
                      if (fallbackProvider) {
                        currentProvider = fallbackProvider;
                        currentSigner = currentSigner.connect(currentProvider);
                        console.log(`   ‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ fallback RPC`);
                      }
                    } catch (fallbackError) {
                      console.log(`   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ fallback RPC: ${fallbackError.message}`);
                    }
                  }
                } else if (receiptError.message.includes('not found') || receiptError.message.includes('Unknown block')) {
                  console.log(`   ‚è≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –µ—â–µ –≤ –º–µ–º–ø—É–ª–µ (–ø–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxReceiptAttempts})`);
                } else if (receiptError.message.includes('timeout')) {
                  console.log(`   ‚è∞ –¢–∞–π–º–∞—É—Ç RPC (–ø–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxReceiptAttempts})`);
                } else {
                  console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${attempts}/${maxReceiptAttempts}: ${receiptError.message}`);
                }
                
                if (attempts >= maxReceiptAttempts) {
                  // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                  console.log(`   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ—Å–ª–µ ${maxReceiptAttempts} –ø–æ–ø—ã—Ç–æ–∫, –Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞`);
                  receipt = { status: 1, hash: tx.hash }; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —É—Å–ø–µ—Ö
                  break;
                }
                
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö RPC
                const waitTime = (receiptError.code === 19 || receiptError.message.includes('free tier')) ? 10000 : 5000;
                await new Promise(resolve => setTimeout(resolve, waitTime));
              }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            if (receipt.status === 0) {
              throw new Error('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–æ–º');
            }
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º API –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            try {
              await this.notifyTransactionIndexed(tx.hash, txData.chainId);
            } catch (notifyError) {
              // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è API
            }
          
            // –î–ª—è approve —à–∞–≥–æ–≤ –∂–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –Ω–æ –Ω–µ –∂–¥—ë–º –ø–æ–ª–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            if (step.id === 'approve') {
              results.push({
                step: step.id,
                status: 'completed',
                txHash: tx.hash
              });
            } else {
              // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —à–∞–≥–æ–≤ (swap, bridge) –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å
              if (item.check) {
                const endpoint = item.check.endpoint;
                const requestId = endpoint.split('requestId=')[1];
                
                console.log(`   üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: ${requestId}`);
                
                // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
                let status = await this.getExecutionStatus(requestId);
                let attempts = 0;
                const maxAttempts = 30;
                
                while (status.status !== 'success' && status.status !== 'failure' && status.status !== 'refund' && attempts < maxAttempts) {
                  console.log(`   ‚è≥ –°—Ç–∞—Ç—É—Å: ${status.status} (–ø–æ–ø—ã—Ç–∫–∞ ${attempts + 1}/${maxAttempts})`);
                  await new Promise(resolve => setTimeout(resolve, 5000));
                  status = await this.getExecutionStatus(requestId);
                  attempts++;
                }
                
                console.log(`   üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${status.status}`);
                
                results.push({
                  step: step.id,
                  status: status.status,
                  details: status
                });
              } else {
                // –î–ª—è —à–∞–≥–æ–≤ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ (–ø—Ä—è–º—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
                results.push({
                  step: step.id,
                  status: 'completed',
                  txHash: tx.hash
                });
              }
            }
            
          } catch (error) {
            // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            let errorMessage = error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
            if (error.code === 'CALL_EXCEPTION' || errorMessage.includes('call exception')) {
              errorMessage = '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º';
            } else if (error.code === 'INSUFFICIENT_FUNDS' || errorMessage.includes('insufficient funds')) {
              errorMessage = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏';
            } else if (error.code === 'UNPREDICTABLE_GAS_LIMIT' || errorMessage.includes('gas')) {
              errorMessage = '–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≥–∞–∑–∞ - –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã';
            } else if (errorMessage.includes('reverted without a reason')) {
              errorMessage = '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã';
            } else if (errorMessage.includes('nonce')) {
              errorMessage = '–û—à–∏–±–∫–∞ nonce - –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É';
            }
            
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ —à–∞–≥–∞ ${step.id}: ${errorMessage}`);
            
            results.push({
              step: step.id,
              status: 'failed',
              error: errorMessage
            });
          }
        } else if (step.kind === 'signature') {
          try {
            console.log(`   ‚úçÔ∏è –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è —à–∞–≥–∞: ${step.id}`);
            
            const signData = item.data.sign;
            const postData = item.data.post;
            
            if (!signData || !signData.message) {
              throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏');
            }
            
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∏
            let signature;
            if (signData.signatureKind === 'eip191') {
              // EIP-191 –ø–æ–¥–ø–∏—Å—å
              const message = signData.message;
              const messageBytes = ethers.getBytes(message);
              signature = await signer.signMessage(messageBytes);
            } else if (signData.signatureKind === 'eip712') {
              // EIP-712 –ø–æ–¥–ø–∏—Å—å (–µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ –±—É–¥—É—â–µ–º)
              throw new Error('EIP-712 –ø–æ–¥–ø–∏—Å—å –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
            } else {
              throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∏: ${signData.signatureKind}`);
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –Ω–∞ API
            if (postData && postData.endpoint) {
              const postUrl = `${this.baseUrl}${postData.endpoint}`;
              const postBody = {
                ...postData.body,
                signature: signature
              };
              
              const response = await axios.post(postUrl, postBody, { headers: this.headers });
              console.log(`   ‚úÖ –ü–æ–¥–ø–∏—Å—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
              
              results.push({
                step: step.id,
                status: 'completed',
                signature: signature
              });
            } else {
              results.push({
                step: step.id,
                status: 'completed',
                signature: signature
              });
            }
            
          } catch (error) {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∏: ${error.message}`);
            results.push({
              step: step.id,
              status: 'failed',
              error: error.message
            });
          }
        }
      }
    }
    
    return results;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –º—É–ª—å—Ç–∏–≤—Ö–æ–¥–Ω—É—é –∫–æ—Ç–∏—Ä–æ–≤–∫—É (—Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ—Ç–µ–π –Ω–∞ –æ–¥–Ω—É)
   * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
   * @returns {Promise<Object>} –ö–æ—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –º—É–ª—å—Ç–∏–≤—Ö–æ–¥–Ω–æ–≥–æ –±—Ä–∏–¥–∂–∞
   */
  async getMultiInputQuote(params) {
    try {
      const quoteParams = {
        ...params,
        source: this.source
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º appFees –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
      if (!quoteParams.appFees) {
        quoteParams.appFees = this.generateAppFees();
      }
      
      const response = await axios.post(
        `${this.baseUrl}/swap/multi-input`,
        quoteParams,
        { headers: this.headers }
      );
      return response.data;
    } catch (error) {
      throw this.handleApiError(error, 'getMultiInputQuote');
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å –±—Ä–∏–¥–∂ —Ç–æ–∫–µ–Ω–æ–≤ –º–µ–∂–¥—É —Å–µ—Ç—è–º–∏
   * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –±—Ä–∏–¥–∂–∞
   * @param {Object} provider - –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π ethers.js –ø—Ä–æ–≤–∞–π–¥–µ—Ä
   * @param {Object} signer - –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π ethers.js –ø–æ–¥–ø–∏—Å–∞–Ω—Ç (–∫–æ—à–µ–ª–µ–∫)
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–∏–¥–∂–∞
   */
  async bridgeTokens(params, provider, signer) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ç–∏—Ä–æ–≤–∫—É
      const quote = await this.getQuote(params);
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥–∏
      const results = await this.executeSteps(quote.steps, provider, signer);
      
      return {
        quote,
        results
      };
    } catch (error) {
      throw this.handleApiError(error, 'bridgeTokens');
    }
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userAddress - –ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<Object>} –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserRequests(userAddress) {
    try {
      const response = await axios.get(
        `${this.baseUrl}/requests?user=${userAddress}`,
        { headers: this.headers }
      );
      return response.data;
    } catch (error) {
      throw this.handleApiError(error, 'getUserRequests');
    }
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
   * @param {Object} response - –û—Ç–≤–µ—Ç –æ—Ç API
   */
  validateQuoteResponse(response) {
    if (!response.steps || !Array.isArray(response.steps)) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —à–∞–≥–∏');
    }
    
    if (!response.fees) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–º–∏—Å—Å–∏–∏');
    }
    
    if (!response.details) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–µ—Ç–∞–ª–∏');
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ API —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
   * @param {Error} error - –û—à–∏–±–∫–∞
   * @param {string} operation - –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
   * @returns {Error} –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
   */
  handleApiError(error, operation) {
    if (error.response) {
      const { status, data } = error.response;
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ Relay API
      if (data && data.errorCode) {
        const errorMessages = {
          'AMOUNT_TOO_LOW': '–°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ –¥–ª—è –±—Ä–∏–¥–∂–∞',
          'INSUFFICIENT_FUNDS': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏',
          'NO_SWAP_ROUTES_FOUND': '–ú–∞—Ä—à—Ä—É—Ç –±—Ä–∏–¥–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω',
          'INSUFFICIENT_LIQUIDITY': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏',
          'CHAIN_DISABLED': '–°–µ—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
          'UNSUPPORTED_CHAIN': '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å–µ—Ç—å',
          'UNSUPPORTED_CURRENCY': '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–∞–ª—é—Ç–∞',
          'SWAP_IMPACT_TOO_HIGH': '–°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ü–µ–Ω—É',
          'ROUTE_TEMPORARILY_RESTRICTED': '–ú–∞—Ä—à—Ä—É—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω',
          'SANCTIONED_CURRENCY': '–í–∞–ª—é—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ —Å–∞–Ω–∫—Ü–∏—è–º–∏',
          'SANCTIONED_WALLET_ADDRESS': '–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ —Å–∞–Ω–∫—Ü–∏—è–º–∏'
        };
        
        const message = errorMessages[data.errorCode] || data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API';
        const enhancedError = new Error(`${message} (${data.errorCode})`);
        enhancedError.errorCode = data.errorCode;
        enhancedError.originalError = error;
        return enhancedError;
      }
      
      // –û–±—â–∏–µ HTTP –æ—à–∏–±–∫–∏
      const statusMessages = {
        400: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å',
        401: '–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø',
        403: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω',
        404: '–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω',
        429: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤',
        500: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        502: '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
        503: '–°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω'
      };
      
      const message = statusMessages[status] || `HTTP –æ—à–∏–±–∫–∞ ${status}`;
      const enhancedError = new Error(`${message} –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ ${operation}`);
      enhancedError.status = status;
      enhancedError.originalError = error;
      return enhancedError;
    }
    
    // –°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
    if (error.code === 'ECONNRESET') {
      const enhancedError = new Error(`–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ ${operation}`);
      enhancedError.originalError = error;
      return enhancedError;
    }
    
    if (error.code === 'ETIMEDOUT') {
      const enhancedError = new Error(`–¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ ${operation}`);
      enhancedError.originalError = error;
      return enhancedError;
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
    return error;
  }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async function example() {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    const relay = new RelayBridge();
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ç–µ–π
    const chains = await relay.getChains();
    console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ç–∏:', chains);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏ –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    const provider = new ethers.JsonRpcProvider('YOUR_RPC_URL');
    const wallet = new ethers.Wallet('YOUR_PRIVATE_KEY', provider);
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –±—Ä–∏–¥–∂–∞
    const bridgeParams = {
      user: wallet.address,
      recipient: wallet.address,
      originChainId: 1, // Ethereum
      destinationChainId: 8453, // Base
      originCurrency: '0x0000000000000000000000000000000000000000', // ETH –Ω–∞ Ethereum
      destinationCurrency: '0x0000000000000000000000000000000000000000', // ETH –Ω–∞ Base
      amount: ethers.parseEther('0.01').toString(),
      slippageTolerance: '50' // 0.5%
    };
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ç–∏—Ä–æ–≤–∫—É
    const quote = await relay.getQuote(bridgeParams);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –±—Ä–∏–¥–∂ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏)
    // const result = await relay.bridgeTokens(bridgeParams, provider, wallet);
    // console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–∏–¥–∂–∞:', result);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ:', error);
  }
}

module.exports = {
  RelayBridge
}; 