const debankScraper = require('./src/debank_balance_checker');
const bridgeExecutor = require('./src/bridge_executor');
const { readPrivateKeys, getAddressFromPrivateKey } = debankScraper;
const { walletDelay } = require('./utils/delay');
const config = require('./src/bridge_executor').getConfig();

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
  console.error('üìç –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:', error.stack);
  
  // –ï—Å–ª–∏ —ç—Ç–æ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞, –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
  if (error.code === 'ECONNRESET' || error.code === 'ENOTFOUND' || error.code === 'ETIMEDOUT') {
    console.log('üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É...');
    return;
  }
  
  // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞');
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
  
  // –ï—Å–ª–∏ —ç—Ç–æ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞, –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
  if (reason && reason.code === 'ECONNRESET' || reason.code === 'ENOTFOUND' || reason.code === 'ETIMEDOUT') {
    console.log('üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ–º–∏—Å—Å–µ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É...');
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ RPC
  if (reason && reason.code === 19 && reason.message && reason.message.includes('Unable to perform request')) {
    console.log('‚ö†Ô∏è RPC –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É...');
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫ RPC
  if (reason && reason.message && (
    reason.message.includes('not found') || 
    reason.message.includes('Unknown block') ||
    reason.message.includes('timeout') ||
    reason.message.includes('network') ||
    reason.message.includes('Unable to perform request')
  )) {
    console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏/RPC - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É...');
    return;
  }
  
  // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ–º–∏—Å—Å–µ - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞');
  process.exit(1);
});

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
function getModeDescription() {
    const collectionMode = config.collection?.mode || 'collect_to_target';
    const targetNetwork = config.collection?.targetNetwork;
    
    switch (collectionMode) {
        case 'collect_to_target':
            if (targetNetwork === 'random') {
                return 'üé≤ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–±—Ä–∏–¥–∂–µ—Ä–∞ - —Å–±–æ—Ä –≤ —Å–ª—É—á–∞–π–Ω—ã–µ —Å–µ—Ç–∏';
            } else if (targetNetwork) {
                return `üåâ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–±—Ä–∏–¥–∂–µ—Ä–∞ - —Å–±–æ—Ä –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤ –≤ ${targetNetwork.toUpperCase()}`;
            } else {
                return 'üåâ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–±—Ä–∏–¥–∂–µ—Ä–∞ - —Å–±–æ—Ä –≤ Base (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)';
            }
        case 'swap_to_native':
            if (targetNetwork === 'all_chains') {
                return 'üí∞ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–±—Ä–∏–¥–∂–µ—Ä–∞ - —Å–≤–∞–ø—ã –≤–æ –≤—Å–µ—Ö —Å–µ—Ç—è—Ö';
            } else if (targetNetwork) {
                return `üí∞ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–±—Ä–∏–¥–∂–µ—Ä–∞ - —Å–≤–∞–ø—ã –≤ —Å–µ—Ç–∏ ${targetNetwork.toUpperCase()}`;
            } else {
                return 'üí∞ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–±—Ä–∏–¥–∂–µ—Ä–∞ - —Å–≤–∞–ø—ã –≤ –Ω–∞—Ç–∏–≤–∫—É';
            }
        default:
            return 'üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–±—Ä–∏–¥–∂–µ—Ä–∞';
    }
}

console.log(getModeDescription());

async function main() {
    try {
        // –ß–∏—Ç–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏
        const privateKeys = readPrivateKeys('keys.txt');
        
        if (privateKeys.length === 0) {
            console.error('‚ùå –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ keys.txt');
            return;
        }
        
        console.log(`üíº –ù–∞–π–¥–µ–Ω–æ ${privateKeys.length} –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏\n`);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–æ—à–µ–ª–µ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é: —Å–∫—Ä–∞–ø–∏–Ω–≥ ‚Üí –±—Ä–∏–¥–∂–∏–Ω–≥
        for (let i = 0; i < privateKeys.length; i++) {
            const privateKey = privateKeys[i];
            const address = getAddressFromPrivateKey(privateKey);
            
            if (!address) {
                console.log(`‚ùå –ö–æ—à–µ–ª–µ–∫ ${i + 1}/${privateKeys.length}: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á\n`);
                continue;
            }
            
            console.log(`üîÑ –ö–æ—à–µ–ª–µ–∫ ${i + 1}/${privateKeys.length}: ${address}`);
            
            try {
                // –≠—Ç–∞–ø 1: –°–∫—Ä–∞–ø–∏–Ω–≥ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
                console.log(`   üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤...`);
                
                const walletData = await scrapeWalletBalance(address, privateKey);
                
                if (!walletData || !walletData.balances || walletData.balances.length === 0) {
                    console.log(`   ‚ùå –ë–∞–ª–∞–Ω—Å—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã\n`);
                    continue;
                }
                
                console.log(`   ‚úÖ –ë–∞–ª–∞–Ω—Å—ã –ø–æ–ª—É—á–µ–Ω—ã`);
                
                // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏
                await new Promise(resolve => setTimeout(resolve, 1000));
                
                // –≠—Ç–∞–ø 2: –ë—Ä–∏–¥–∂–∏–Ω–≥ –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
                console.log(`   üåâ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–±—Ä–∏–¥–∂–µ—Ä–∞...`);
                await bridgeExecutor.main([walletData]);
                
                console.log(`   ‚úÖ –ö–æ—à–µ–ª–µ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n`);
                
                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–æ—à–µ–ª—å–∫–∞–º–∏
                if (i < privateKeys.length - 1) {
                    await walletDelay();
                    console.log('');
                }
                
            } catch (error) {
                console.log(`   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ—à–µ–ª—å–∫–∞: ${error.message}\n`);
                continue;
            }
        }
        
        console.log('üéâ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∞–≤—Ç–æ–±—Ä–∏–¥–∂–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        
    } catch (error) {
        console.log('\nüí• –û—à–∏–±–∫–∞ –≤ –ø–æ–ª–Ω–æ–º —Ü–∏–∫–ª–µ:', error.message);
        process.exit(1);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –±–∞–ª–∞–Ω—Å–∞ –æ–¥–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
async function scrapeWalletBalance(address, privateKey) {
    const puppeteer = require('puppeteer');
    
    const browser = await puppeteer.launch({ 
        headless: true, 
        args: ['--no-sandbox', '--disable-setuid-sandbox'] 
    });
    
    try {
        const url = `https://debank.com/profile/${address}`;
        const balanceListResponses = [];
        
        const page = await browser.newPage();
        
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç –æ—Ç–≤–µ—Ç–æ–≤
        page.on('response', async (response) => {
            const reqUrl = response.url();
            if (reqUrl.includes('balance_list')) {
                try {
                    const json = await response.json();
                    balanceListResponses.push({
                        url: reqUrl,
                        data: json
                    });
                } catch (e) {
                    // ignore non-json
                }
            }
        });

        await page.goto(url, { waitUntil: 'networkidle2' });

        // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ "Data updated"
        try {
            await page.waitForFunction(
                () => !!Array.from(document.querySelectorAll('body *')).find(el => el.textContent.includes('Data updated')),
                { timeout: 30000 }
            );
        } catch (error) {
            // –ß–∞—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        }

        // –ñ–¥–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã —É—Å–ø–µ–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
        await new Promise(resolve => setTimeout(resolve, 5000));

        await page.close();
        
        return {
            address: address,
            privateKey: privateKey,
            balances: balanceListResponses
        };
        
    } finally {
        await browser.close();
    }
}

main(); 