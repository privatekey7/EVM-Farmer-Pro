const fs = require('fs');
const path = require('path');
const ethers = require('ethers');
const axios = require('axios');

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø—Ä–æ–º–∏—Å–æ–≤
process.on('unhandledRejection', (reason, promise) => {
  console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏/RPC - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
});

process.on('uncaughtException', (error) => {
  console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ–º–∏—Å—Å–µ - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞');
  process.exit(1);
});

// –ò–º–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç
const { RelayBridge } = require('../utils/relay');
const chainMapper = require('../utils/chainMapper');
const rpcConfig = require('../utils/RPC.json');
const fallbackRpcConfig = require('../utils/fallbackRPC.json');
const { transactionDelay } = require('../utils/delay');

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Relay Bridge
const relayBridge = new RelayBridge(); // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
function getConfig() {
  if (typeof global !== 'undefined' && global.getConfig) {
    try {
      return global.getConfig();
    } catch (error) {
      console.log('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
    }
  }
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  return {
    collection: {
      mode: 'collect_to_target',
      targetNetwork: 'base'
    },
    excludedNetworks: [],
    transaction: {
          delayMinMs: 30000,
    delayMaxMs: 60000,
    walletDelayMinMs: 120000,
    walletDelayMaxMs: 300000
    }
  };
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const BASE_CHAIN_ID = 8453; // Chain ID –¥–ª—è Base
const DESTINATION_ADDRESS = null; // –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–µ—Å–ª–∏ null, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ—Ç –∂–µ –∞–¥—Ä–µ—Å)
// –ü—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ Relay API
const WRAPPED_TOKEN_PREFIX = {
  eth: 'W',  // WETH
  arb: 'W',  // WETH
  op: 'W',   // WETH
  taiko: 'W', // WETH
};

// –ü–æ–ª—É—á–∞–µ–º RPC URL –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
function getRpcUrl(chainId) {
  const config = rpcConfig.rpc.find(item => item.chainId === chainId);
  return config ? config.httpRpcUrl : null;
}

// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ RPC URL –¥–ª—è —Å–µ—Ç–∏ (–æ—Å–Ω–æ–≤–Ω–æ–π + fallback)
function getAllRpcUrls(chainId) {
  const urls = [];
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π RPC
  const mainConfig = rpcConfig.rpc.find(item => item.chainId === chainId);
  if (mainConfig) {
    urls.push(mainConfig.httpRpcUrl);
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º fallback RPC
  const fallbackConfig = fallbackRpcConfig.fallbackRPC.find(item => item.chainId === chainId);
  if (fallbackConfig && fallbackConfig.fallbackUrls) {
    urls.push(...fallbackConfig.fallbackUrls);
  }
  
  return urls;
}

// –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–µ—Ç–∏
function getChainName(chainId) {
  const config = rpcConfig.rpc.find(item => item.chainId === chainId);
  return config ? config.name.toUpperCase() : `Chain ${chainId}`;
}

// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å fallback –ª–æ–≥–∏–∫–æ–π
async function createProviderWithFallback(chainId) {
  const urls = getAllRpcUrls(chainId);
  const chainName = getChainName(chainId);
  
  if (urls.length === 0) {
    console.log(`   ‚ùå RPC URL –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ${chainName}`);
    return null;
  }
  
  console.log(`   üîç –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${chainName} (${urls.length} RPC –¥–æ—Å—Ç—É–ø–Ω–æ)`);
  
  // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π RPC (–ø–µ—Ä–≤—ã–π –≤ —Å–ø–∏—Å–∫–µ)
  const mainRpcUrl = urls[0];
  const fallbackUrls = urls.slice(1);
  
  // 3 –ø–æ–ø—ã—Ç–∫–∏ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É RPC
  console.log(`\n –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ RPC: ${mainRpcUrl}`);
  for (let attempt = 1; attempt <= 3; attempt++) {
    try {
      console.log(`   üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/3 –æ—Å–Ω–æ–≤–Ω–æ–≥–æ RPC`);
      
      const provider = new ethers.JsonRpcProvider(mainRpcUrl, undefined, {
        staticNetwork: true, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é —Å–µ—Ç—å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
        timeout: 10000 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 10 —Å–µ–∫—É–Ω–¥
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      const networkPromise = provider.getNetwork();
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('Timeout')), 10000)
      );
      
      await Promise.race([networkPromise, timeoutPromise]);
      
      console.log(`   ‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π RPC —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${chainName} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
      return provider;
      
    } catch (error) {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      let errorType = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è';
      if (error.code === 'SERVER_ERROR' || error.message.includes('Bad Request')) {
        errorType = '—Å–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞';
      } else if (error.code === 'TIMEOUT' || error.message.includes('Timeout')) {
        errorType = '—Ç–∞–π–º–∞—É—Ç';
      } else if (error.code === 'NETWORK_ERROR' || error.message.includes('network')) {
        errorType = '—Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞';
      } else if (error.message.includes('jsonrpc')) {
        errorType = '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON-RPC';
      }
      
      console.log(`   ‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/3 –æ—Å–Ω–æ–≤–Ω–æ–≥–æ RPC –Ω–µ—É–¥–∞—á–Ω–∞ (${errorType}): ${error.message}`);
      
      if (attempt < 3) {
        console.log(`   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    }
  }
  
  // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π RPC –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º fallback RPC
  if (fallbackUrls.length > 0) {
    console.log(`\nüîÑ –û—Å–Ω–æ–≤–Ω–æ–π RPC –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ fallback RPC (${fallbackUrls.length} –¥–æ—Å—Ç—É–ø–Ω–æ)`);
    
    for (let i = 0; i < fallbackUrls.length; i++) {
      const fallbackUrl = fallbackUrls[i];
      
      try {
        console.log(`   üì° –ü–æ–ø—ã—Ç–∫–∞ ${i + 1}/${fallbackUrls.length}: fallback RPC`);
        
        const provider = new ethers.JsonRpcProvider(fallbackUrl, undefined, {
          staticNetwork: true, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é —Å–µ—Ç—å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
          timeout: 10000 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 10 —Å–µ–∫—É–Ω–¥
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        const networkPromise = provider.getNetwork();
        const timeoutPromise = new Promise((_, reject) => 
          setTimeout(() => reject(new Error('Timeout')), 10000)
        );
        
        await Promise.race([networkPromise, timeoutPromise]);
        
        console.log(`   ‚úÖ Fallback RPC —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${chainName} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
        return provider;
        
      } catch (error) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        let errorType = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è';
        if (error.code === 'SERVER_ERROR' || error.message.includes('Bad Request')) {
          errorType = '—Å–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞';
        } else if (error.code === 'TIMEOUT' || error.message.includes('Timeout')) {
          errorType = '—Ç–∞–π–º–∞—É—Ç';
        } else if (error.code === 'NETWORK_ERROR' || error.message.includes('network')) {
          errorType = '—Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞';
        } else if (error.message.includes('jsonrpc')) {
          errorType = '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON-RPC';
        }
        
        console.log(`   ‚ùå Fallback RPC ${i + 1}/${fallbackUrls.length} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (${errorType}): ${error.message}`);
        
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π fallback RPC, –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–ø—É—Å–∫ —Å–µ—Ç–∏
        if (i === fallbackUrls.length - 1) {
          console.log(`   ‚ö†Ô∏è  –í—Å–µ RPC –¥–ª—è ${chainName} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ—Ç—å`);
          return null;
        }
      }
    }
  } else {
    console.log(`   ‚ö†Ô∏è  Fallback RPC –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è ${chainName}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ—Ç—å`);
    return null;
  }
  
  return null;
}

// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ Relay API
function handleRelayError(error, tokenSymbol, operationType = '–æ–ø–µ—Ä–∞—Ü–∏–∏', chainName = '') {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
  if (error.code === 'ECONNRESET' || error.code === 'ENOTFOUND' || error.code === 'ETIMEDOUT') {
    console.log(`   ‚ö†Ô∏è  –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ ${operationType} ${tokenSymbol}: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ UI
    if (global.broadcastLog) {
      global.broadcastLog({
        type: 'token_operation',
        operation: operationType.includes('—Å–≤–∞–ø') ? 'swap' : 'bridge',
        data: {
          token: {
            symbol: tokenSymbol,
            logo_url: null
          },
          chain: chainName.toUpperCase(),
          target: operationType.includes('–±—Ä–∏–¥–∂') ? 'Base' : '–Ω–∞—Ç–∏–≤–Ω—ã–π',
          status: 'skipped',
          reason: '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞'
        }
      }, 'warning');
    }
    return;
  }
  
  if (error.response && error.response.data) {
    const errorCode = error.response.data.errorCode;
    const errorMessage = error.response.data.message || '';
    
    // –ö–∞—Ä—Ç–∞ –æ—à–∏–±–æ–∫ Relay API —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    const errorMap = {
      // Expected Errors (–æ–∂–∏–¥–∞–µ–º—ã–µ –æ—à–∏–±–∫–∏)
      'AMOUNT_TOO_LOW': `–°—É–º–º–∞ ${tokenSymbol} —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ –¥–ª—è ${operationType}`,
      'CHAIN_DISABLED': `–°–µ—Ç—å ${chainName} –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞`,
      'EXTRA_TXS_NOT_SUPPORTED': `–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è`,
      'FORBIDDEN': `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏`,
      'INSUFFICIENT_FUNDS': `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${tokenSymbol} –Ω–∞ –±–∞–ª–∞–Ω—Å–µ`,
      'INSUFFICIENT_LIQUIDITY': `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –¥–ª—è ${operationType} ${tokenSymbol}`,
      'INVALID_ADDRESS': `–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞`,
      'INVALID_EXTRA_TXS': `–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏`,
      'INVALID_GAS_LIMIT_FOR_DEPOSIT_SPECIFIED_TXS': `–ù–µ–≤–µ—Ä–Ω—ã–π –ª–∏–º–∏—Ç –≥–∞–∑–∞ –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`,
      'INVALID_INPUT_CURRENCY': `–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –≤—Ö–æ–¥–Ω–æ–π —Ç–æ–∫–µ–Ω ${tokenSymbol}`,
      'INVALID_OUTPUT_CURRENCY': `–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –≤—ã—Ö–æ–¥–Ω–æ–π —Ç–æ–∫–µ–Ω`,
      'INVALID_SLIPPAGE_TOLERANCE': `–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è`,
      'NO_INTERNAL_SWAP_ROUTES_FOUND': `–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã ${operationType} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`,
      'NO_QUOTES': `–ö–æ—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è ${operationType} ${tokenSymbol} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã`,
      'NO_SWAP_ROUTES_FOUND': `–ú–∞—Ä—à—Ä—É—Ç—ã ${operationType} –¥–ª—è ${tokenSymbol} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`,
      'ROUTE_TEMPORARILY_RESTRICTED': `–ú–∞—Ä—à—Ä—É—Ç ${operationType} –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω`,
      'SANCTIONED_CURRENCY': `–¢–æ–∫–µ–Ω ${tokenSymbol} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–∞–Ω–∫—Ü–∏–æ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ`,
      'SANCTIONED_WALLET_ADDRESS': `–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`,
      'SWAP_IMPACT_TOO_HIGH': `–°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ü–µ–Ω—É ${tokenSymbol}`,
      'UNAUTHORIZED': `–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏`,
      'UNSUPPORTED_CHAIN': `${operationType.charAt(0).toUpperCase() + operationType.slice(1)} –≤ —Å–µ—Ç–∏ ${chainName} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`,
      'UNSUPPORTED_CURRENCY': `–¢–æ–∫–µ–Ω ${tokenSymbol} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è ${operationType}`,
      'UNSUPPORTED_EXECUTION_TYPE': `–¢–∏–ø –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`,
      'UNSUPPORTED_ROUTE': `–ú–∞—Ä—à—Ä—É—Ç ${operationType} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`,
      'USER_RECIPIENT_MISMATCH': `–ê–¥—Ä–µ—Å–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å`,
      
      // Unexpected Errors (–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏)
      'DESTINATION_TX_FAILED': `–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ —Ü–µ–ª–µ–≤–æ–π —Å–µ—Ç–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å`,
      'ERC20_ROUTER_ADDRESS_NOT_FOUND': `–ê–¥—Ä–µ—Å —Ä–æ—É—Ç–µ—Ä–∞ —Ç–æ–∫–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω`,
      'UNKNOWN_ERROR': `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ ${operationType} ${tokenSymbol}`,
      'SWAP_QUOTE_FAILED': `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è ${operationType} ${tokenSymbol}`,
      'PERMIT_FAILED': `–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞`,
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
      'NO_BRIDGE_ROUTES_FOUND': `–ú–∞—Ä—à—Ä—É—Ç –±—Ä–∏–¥–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ${tokenSymbol}`,
      'CHAIN_NOT_SUPPORTED': `${operationType.charAt(0).toUpperCase() + operationType.slice(1)} –∏–∑ ${chainName} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`,
      'INSUFFICIENT_BALANCE': `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${tokenSymbol} –¥–ª—è ${operationType}`
    };
    
    // –ò—â–µ–º –æ—à–∏–±–∫—É –ø–æ –∫–æ–¥—É
    if (errorCode && errorMap[errorCode]) {
      console.log(`   ‚ö†Ô∏è  ${errorMap[errorCode]}`);
      return;
    }
    
    // –ò—â–µ–º –æ—à–∏–±–∫—É –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    const lowerMessage = errorMessage.toLowerCase();
    if (lowerMessage.includes('too low') || lowerMessage.includes('minimum')) {
      console.log(`   ‚ö†Ô∏è  ${errorMap['AMOUNT_TOO_LOW']}`);
    } else if (lowerMessage.includes('insufficient')) {
      console.log(`   ‚ö†Ô∏è  ${errorMap['INSUFFICIENT_BALANCE']}`);
    } else if (lowerMessage.includes('no route') || lowerMessage.includes('routes not found')) {
      if (operationType.includes('–±—Ä–∏–¥–∂')) {
        console.log(`   ‚ö†Ô∏è  ${errorMap['NO_BRIDGE_ROUTES_FOUND']}`);
      } else {
        console.log(`   ‚ö†Ô∏è  ${errorMap['NO_SWAP_ROUTES_FOUND']}`);
      }
    } else if (lowerMessage.includes('unsupported') || lowerMessage.includes('not supported')) {
      console.log(`   ‚ö†Ô∏è  ${errorMap['UNSUPPORTED_CURRENCY']}`);
    } else {
      // –ï—Å–ª–∏ –∫–æ–¥ –æ—à–∏–±–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –≤—ã–≤–æ–¥–∏–º –µ–≥–æ
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ ${operationType}: ${errorCode || errorMessage}`);
    }
  } else {
    // –î–ª—è –æ—à–∏–±–æ–∫ –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ ${operationType}: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤
function processTokensData(balanceData) {
  const processedData = {};
  
        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –æ—Ç–≤–µ—Ç–∞–º API
      for (const response of balanceData) {
        if (!response.data || !response.data.data) continue;
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –æ—Ç–≤–µ—Ç–∞
        for (const token of response.data.data) {
          const chain = token.chain;
          
          // Base –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ - –∑–¥–µ—Å—å —Ç–æ–ª—å–∫–æ —Å–≤–∞–ø—ã –≤ ETH, –±–µ–∑ –±—Ä–∏–¥–∂–∏–Ω–≥–∞
          
          // –ï—Å–ª–∏ —Å–µ—Ç—å –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ—ë
          if (!processedData[chain]) {
            processedData[chain] = {
              nativeToken: null,
              wrappedNativeToken: null,
              otherTokens: []
            };
          }
          
          // –í—ã—á–∏—Å–ª—è–µ–º USD —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
          const usdValue = token.amount * token.price;
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ–∫–µ–Ω –Ω–∞—Ç–∏–≤–Ω—ã–º –∏–ª–∏ –æ–±—ë—Ä–Ω—É—Ç—ã–º –Ω–∞—Ç–∏–≤–Ω—ã–º
          const isNative = token.is_core && !token.id.startsWith('0x');
          
          // –û–±—ë—Ä–Ω—É—Ç—ã–µ —Ç–æ–∫–µ–Ω—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ WRAPPED_TOKEN_PREFIX
          const isWrappedNative = 
            WRAPPED_TOKEN_PREFIX[chain] && // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–ª—è —Å–µ—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø—Ä–µ—Ñ–∏–∫—Å
            token.optimized_symbol && 
            token.optimized_symbol.startsWith(WRAPPED_TOKEN_PREFIX[chain]) &&
            (token.name.toLowerCase().includes('wrapped') || 
             token.name.toLowerCase().includes('weth'));
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
          if (token.raw_amount === undefined && token.raw_amount === null && !token.raw_amount_str) {
            continue;
          }
          
          // –ü–æ–ª—É—á–∞–µ–º raw amount –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
          let rawAmount;
          if (token.raw_amount !== undefined && token.raw_amount !== null) {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ BigInt –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª
            rawAmount = BigInt(Math.floor(Number(token.raw_amount))).toString();
          } else if (token.raw_amount_str) {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ BigInt
            rawAmount = BigInt(Math.floor(Number(token.raw_amount_str))).toString();
          } else {
            rawAmount = BigInt(Math.floor(token.amount * Math.pow(10, token.decimals || 18))).toString();
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
          if (isNative) {
            processedData[chain].nativeToken = {
              id: token.id,
              symbol: token.symbol,
              amount: token.amount,
              rawAmount: rawAmount,
              decimals: token.decimals,
              usdValue: usdValue,
              price: token.price,
              logo_url: token.logo_url || token.logo || null
            };
          } else if (isWrappedNative) {
            processedData[chain].wrappedNativeToken = {
              id: token.id,
              symbol: token.symbol,
              amount: token.amount,
              rawAmount: rawAmount,
              decimals: token.decimals,
              usdValue: usdValue,
              price: token.price,
              address: token.id.startsWith('0x') ? token.id : null,
              logo_url: token.logo_url || token.logo || null
            };
          } else if (token.id.startsWith('0x')) { // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã —Å –∞–¥—Ä–µ—Å–∞–º–∏ (–∫—Ä–æ–º–µ –Ω–∞—Ç–∏–≤–Ω—ã—Ö)
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–æ–∫–µ–Ω–∞ —Å —Ç–∞–∫–∏–º –∞–¥—Ä–µ—Å–æ–º
            const existingTokenIndex = processedData[chain].otherTokens.findIndex(t => t.id === token.id);
            const tokenData = {
              id: token.id,
              symbol: token.symbol,
              amount: token.amount,
              rawAmount: rawAmount,
              decimals: token.decimals,
              usdValue: usdValue,
              price: token.price,
              address: token.id,
              logo_url: token.logo_url || token.logo || null
            };
            
            if (existingTokenIndex >= 0) {
              // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–º–∏ —Å –±–æ–ª—å—à–∏–º –±–∞–ª–∞–Ω—Å–æ–º
              if (token.amount > processedData[chain].otherTokens[existingTokenIndex].amount) {
                processedData[chain].otherTokens[existingTokenIndex] = tokenData;
              }
            } else {
              // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
              processedData[chain].otherTokens.push(tokenData);
            }
          }
        }
      }
  
  return processedData;
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å retry
async function unwrapToken(wallet, chainId, wrappedTokenAddress, amount) {
  const provider = await createProviderWithFallback(chainId);
  if (!provider) {
    console.log(`   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–≤—Ä–∞–ø - RPC –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è ${getChainName(chainId)}`);
    return false;
  }
  
  const wethAbi = ['function withdraw(uint wad) public'];
  
  for (let attempt = 1; attempt <= 3; attempt++) {
    try {
      const signer = new ethers.Wallet(wallet.privateKey, provider);
      const wethContract = new ethers.Contract(wrappedTokenAddress, wethAbi, signer);
      
      console.log(`   üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∞–Ω–≤—Ä–∞–ø–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/3)...`);
      const tx = await wethContract.withdraw(amount);
      
      console.log(`   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...`);
      
      // –¢–∞–π–º–∞—É—Ç 60 —Å–µ–∫—É–Ω–¥
      const receiptPromise = tx.wait();
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('Timeout waiting for transaction confirmation')), 60000)
      );
      
      const receipt = await Promise.race([receiptPromise, timeoutPromise]);
      
      console.log(`   ‚úÖ –ê–Ω–≤—Ä–∞–ø –≤—ã–ø–æ–ª–Ω–µ–Ω (–±–ª–æ–∫: ${receipt.blockNumber})`);
      return true;
      
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–≤—Ä–∞–ø–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/3): ${error.message}`);
      
      if (attempt < 3) {
        console.log(`   üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...`);
        await new Promise(resolve => setTimeout(resolve, 3000));
      }
    }
  }
  
  console.log(`   ‚ö†Ô∏è  –ê–Ω–≤—Ä–∞–ø –Ω–µ —É–¥–∞–ª—Å—è –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫, –Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –º–æ–≥–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è`);
  return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–≤–∞–ø–∞ —Ç–æ–∫–µ–Ω–∞ –≤ –Ω–∞—Ç–∏–≤–Ω—ã–π —á–µ—Ä–µ–∑ Relay
async function swapTokenToNative(wallet, chain, tokenData, shouldDelayAfter = false) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏
  if (typeof global !== 'undefined' && global.shouldStop && global.shouldStop()) {
    console.log('‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–±—Ä–∏–¥–∂–µ—Ä–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return false;
  }
  
  const debankChainId = chain;
  const chainId = chainMapper.getChainId(debankChainId);
  
  if (!chainId) {
    return false;
  }
  
  const provider = await createProviderWithFallback(chainId);
  if (!provider) {
    console.log(`   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–≤–∞–ø ${tokenData.symbol} - RPC –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è ${getChainName(chainId)}`);
    return false;
  }
  
  try {
    const signer = new ethers.Wallet(wallet.privateKey, provider);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ rawAmount
    if (!tokenData.rawAmount) {
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞ –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ
    const tokenAbi = ['function balanceOf(address owner) view returns (uint256)'];
    const tokenContract = new ethers.Contract(tokenData.address, tokenAbi, provider);
    
    try {
      const actualBalance = await tokenContract.balanceOf(wallet.address);
      const requestedAmount = BigInt(tokenData.rawAmount);
      
      if (actualBalance < requestedAmount) {
        if (actualBalance === 0n) {
          return false;
        }
        tokenData.rawAmount = actualBalance.toString();
      }
      

      
    } catch (error) {
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    }
    
    // –î–ª—è —Å–≤–∞–ø–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—é —Å—É–º–º—É (–≥–∞–∑ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞—Ç–∏–≤–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º, –∞ –Ω–µ —Å–≤–∞–ø–∞–µ–º—ã–º)
    const quoteParams = {
      user: wallet.address,
      recipient: wallet.address,
      originChainId: chainId,
      destinationChainId: chainId, // –°–≤–∞–ø –≤–Ω—É—Ç—Ä–∏ —Ç–æ–π –∂–µ —Å–µ—Ç–∏
      originCurrency: tokenData.address,
      destinationCurrency: '0x0000000000000000000000000000000000000000', // –°–≤–∞–ø –≤ –Ω–∞—Ç–∏–≤–Ω—É—é –≤–∞–ª—é—Ç—É
      amount: BigInt(Math.floor(Number(tokenData.rawAmount))).toString(), // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
      tradeType: 'EXACT_INPUT'
      // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º slippageTolerance –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞
    };
    
    const actualAmountFormatted = (Number(tokenData.rawAmount) / Math.pow(10, tokenData.decimals || 18)).toFixed(6);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º USD —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ - –µ—Å–ª–∏ –º–µ–Ω—å—à–µ $0.01, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ –¥–ª—è —Å–≤–∞–ø–∞
    const actualAmount = Number(tokenData.rawAmount) / Math.pow(10, tokenData.decimals || 18);
    const usdValue = actualAmount * (tokenData.price || 0);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å (–º–µ–Ω—å—à–µ $0.01) –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ü–µ–Ω—ã
    if (usdValue < 0.01) {
      console.log(`   üîÑ –°–≤–∞–ø ${tokenData.symbol} (${actualAmountFormatted}) ‚Üí ${chain === 'base' ? 'ETH' : '–Ω–∞—Ç–∏–≤–Ω—ã–π'}`);
      
      if (tokenData.price === 0 || tokenData.price === null || tokenData.price === undefined) {
        console.log(`   ‚ö†Ô∏è  –¢–æ–∫–µ–Ω ${tokenData.symbol} –Ω–µ –∏–º–µ–µ—Ç —Ü–µ–Ω—ã - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ UI
        if (global.broadcastLog) {
          global.broadcastLog({
            type: 'token_operation',
            operation: 'swap',
            data: {
              token: {
                symbol: tokenData.symbol,
                amount: actualAmountFormatted,
                logo_url: tokenData.logo_url,
                usd_value: '0.00'
              },
              chain: chain.toUpperCase(),
              target: chain === 'base' ? 'ETH' : '–Ω–∞—Ç–∏–≤–Ω—ã–π',
              status: 'skipped',
              reason: '–¢–æ–∫–µ–Ω –Ω–µ –∏–º–µ–µ—Ç —Ü–µ–Ω—ã'
            }
          }, 'warning');
        }
      } else {
        console.log(`   ‚ö†Ô∏è  –°—É–º–º–∞ ${tokenData.symbol} —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ –¥–ª—è —Å–≤–∞–ø–∞ ($${usdValue.toFixed(4)})`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ UI –æ —Ç–æ–º —á—Ç–æ —Å—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞
        if (global.broadcastLog) {
          global.broadcastLog({
            type: 'token_operation',
            operation: 'swap',
            data: {
              token: {
                symbol: tokenData.symbol,
                amount: actualAmountFormatted,
                logo_url: tokenData.logo_url,
                usd_value: usdValue.toFixed(4)
              },
              chain: chain.toUpperCase(),
              target: chain === 'base' ? 'ETH' : '–Ω–∞—Ç–∏–≤–Ω—ã–π',
              status: 'skipped',
              reason: '–°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞'
            }
          }, 'warning');
        }
      }
      
      return false;
    }
    
    console.log(`   üîÑ –°–≤–∞–ø ${tokenData.symbol} (${actualAmountFormatted}) ‚Üí ${chain === 'base' ? 'ETH' : '–Ω–∞—Ç–∏–≤–Ω—ã–π'}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –Ω–∞—á–∞–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ UI
    if (global.broadcastLog) {
      global.broadcastLog({
        type: 'token_operation',
        operation: 'swap',
        data: {
          token: {
            symbol: tokenData.symbol,
            amount: actualAmountFormatted,
            logo_url: tokenData.logo_url,
            usd_value: usdValue.toFixed(2)
          },
          chain: chain.toUpperCase(),
          target: chain === 'base' ? 'ETH' : '–Ω–∞—Ç–∏–≤–Ω—ã–π',
          status: 'started'
        }
      }, 'info');
    }
    
    // Retry –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è getQuote
    let quote;
    let retryCount = 0;
    const maxRetries = 3;
    
    while (retryCount < maxRetries) {
      try {
        quote = await relayBridge.getQuote(quoteParams);
        break; // –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –∫–æ—Ç–∏—Ä–æ–≤–∫—É
      } catch (error) {
        retryCount++;
        
        // –ï—Å–ª–∏ —ç—Ç–æ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –∏ –µ—Å—Ç—å –µ—â–µ –ø–æ–ø—ã—Ç–∫–∏
        if ((error.code === 'ECONNRESET' || error.code === 'ENOTFOUND' || error.code === 'ETIMEDOUT') && retryCount < maxRetries) {
          console.log(`   üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${retryCount}/${maxRetries} –¥–ª—è ${tokenData.symbol}...`);
          await new Promise(resolve => setTimeout(resolve, 2000 * retryCount)); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
          continue;
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏
        handleRelayError(error, tokenData.symbol, '—Å–≤–∞–ø–∞', chain);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ UI
        if (global.broadcastLog) {
          global.broadcastLog({
            type: 'token_operation',
            operation: 'swap',
            data: {
              token: {
                symbol: tokenData.symbol,
                amount: actualAmountFormatted,
                logo_url: tokenData.logo_url,
                usd_value: usdValue.toFixed(2)
              },
              chain: chain.toUpperCase(),
              target: chain === 'base' ? 'ETH' : '–Ω–∞—Ç–∏–≤–Ω—ã–π',
              status: 'skipped',
              reason: '–°–≤–∞–ø –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
            }
          }, 'warning');
        }
        
        return false;
      }
    }
    
    // –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏ —É–¥–∞–ª–µ–Ω—ã
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ç–∏—Ä–æ–≤–∫—É –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–≤–∞–ø–∞
    if (quote.breakdown && quote.breakdown.details && quote.breakdown.details.currencyOut) {
      const outputAmount = Number(quote.breakdown.details.currencyOut.amount);
      if (outputAmount <= 0) {
        console.log(`   ‚ö†Ô∏è  –°—É–º–º–∞ ${tokenData.symbol} —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ –¥–ª—è —Å–≤–∞–ø–∞`);
        return false;
      }
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ steps - –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç —Å–≤–∞–ø –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω
    if (!quote.steps || quote.steps.length === 0) {
      console.log(`   ‚ö†Ô∏è  –°—É–º–º–∞ ${tokenData.symbol} —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ –¥–ª—è —Å–≤–∞–ø–∞`);
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∫–æ—Ç–∏—Ä–æ–≤–∫–µ
    if (quote.message && quote.message.includes('too low')) {
      console.log(`   ‚ö†Ô∏è  –°—É–º–º–∞ ${tokenData.symbol} —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ –¥–ª—è —Å–≤–∞–ø–∞`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ UI –æ —Ç–æ–º —á—Ç–æ —Å—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞
      if (global.broadcastLog) {
        global.broadcastLog({
          type: 'token_operation',
          operation: 'swap',
          data: {
            token: {
              symbol: tokenData.symbol,
              amount: actualAmountFormatted,
              logo_url: tokenData.logo_url,
              usd_value: usdValue.toFixed(2)
            },
            chain: chain.toUpperCase(),
            target: chain === 'base' ? 'ETH' : '–Ω–∞—Ç–∏–≤–Ω—ã–π',
            status: 'skipped',
            reason: '–°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞'
          }
        }, 'warning');
      }
      
      return false;
    }
    
    const steps = quote.steps;
    
    // Retry –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è executeSteps
    let result;
    let executeRetryCount = 0;
    const maxExecuteRetries = 2;
    
    while (executeRetryCount < maxExecuteRetries) {
      try {
        // –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥–∏ —Å–≤–∞–ø–∞ —Å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≥–∞–∑–∞ –∏–∑ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
        result = await relayBridge.executeSteps(steps, provider, signer);
        break; // –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏
      } catch (error) {
        executeRetryCount++;
        
        // –ï—Å–ª–∏ —ç—Ç–æ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –∏ –µ—Å—Ç—å –µ—â–µ –ø–æ–ø—ã—Ç–∫–∏
        if ((error.code === 'ECONNRESET' || error.code === 'ENOTFOUND' || error.code === 'ETIMEDOUT') && executeRetryCount < maxExecuteRetries) {
          console.log(`   üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ${executeRetryCount}/${maxExecuteRetries} –¥–ª—è ${tokenData.symbol}...`);
          await new Promise(resolve => setTimeout(resolve, 3000 * executeRetryCount)); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
          continue;
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–≤–∞–ø–∞ ${tokenData.symbol}: ${error.message}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ UI
        if (global.broadcastLog) {
          global.broadcastLog({
            type: 'token_operation',
            operation: 'swap',
            data: {
              token: {
                symbol: tokenData.symbol,
                amount: actualAmountFormatted,
                logo_url: tokenData.logo_url,
                usd_value: usdValue.toFixed(2)
              },
              chain: chain.toUpperCase(),
              target: chain === 'base' ? 'ETH' : '–Ω–∞—Ç–∏–≤–Ω—ã–π',
              status: 'failed',
              reason: '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
            }
          }, 'error');
        }
        
        return false;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    if (result && result.length > 0) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —à–∞–≥–∏
      const failedSteps = result.filter(step => step.status === 'failed');
      if (failedSteps.length > 0) {
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –ø—Ä–æ–≤–∞–ª–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        const failedErrors = failedSteps.map(step => step.error || '').join(' ').toLowerCase();
        
        if (failedErrors.includes('too low') || 
            failedErrors.includes('insufficient') ||
            failedErrors.includes('amount') ||
            failedErrors.includes('balance')) {
          console.log(`   ‚ö†Ô∏è  –°—É–º–º–∞ ${tokenData.symbol} —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ –¥–ª—è —Å–≤–∞–ø–∞`);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ UI –æ —Ç–æ–º —á—Ç–æ —Å—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞
          if (global.broadcastLog) {
            global.broadcastLog({
              type: 'token_operation',
              operation: 'swap',
              data: {
                token: {
                  symbol: tokenData.symbol,
                  amount: actualAmountFormatted,
                  logo_url: tokenData.logo_url,
                  usd_value: usdValue.toFixed(2)
                },
                chain: chain.toUpperCase(),
                target: chain === 'base' ? 'ETH' : '–Ω–∞—Ç–∏–≤–Ω—ã–π',
                status: 'skipped',
                reason: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤'
              }
            }, 'warning');
          }
        } else {
          console.log(`   ‚ùå –°–≤–∞–ø ${tokenData.symbol} –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω`);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ UI –æ –Ω–µ—É–¥–∞—á–Ω–æ–º —Å–≤–∞–ø–µ
          if (global.broadcastLog) {
            global.broadcastLog({
              type: 'token_operation',
              operation: 'swap',
              data: {
                token: {
                  symbol: tokenData.symbol,
                  amount: actualAmountFormatted,
                  logo_url: tokenData.logo_url,
                  usd_value: usdValue.toFixed(2)
                },
                chain: chain.toUpperCase(),
                target: chain === 'base' ? 'ETH' : '–Ω–∞—Ç–∏–≤–Ω—ã–π',
                status: 'skipped',
                reason: '–°–≤–∞–ø –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
              }
            }, 'error');
          }
        }
        return false;
      }
    }
    
    console.log(`   ‚úÖ –°–≤–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ —É—Å–ø–µ—Ö–∞ –≤ UI
    if (global.broadcastLog) {
      global.broadcastLog({
        type: 'token_operation',
        operation: 'swap',
        data: {
          token: {
            symbol: tokenData.symbol,
            amount: actualAmountFormatted,
            logo_url: tokenData.logo_url,
            usd_value: usdValue.toFixed(2)
          },
          chain: chain.toUpperCase(),
          target: chain === 'base' ? 'ETH' : '–Ω–∞—Ç–∏–≤–Ω—ã–π',
          status: 'success'
        }
      }, 'success');
    }
    
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω)
    if (shouldDelayAfter) {
      await transactionDelay();
    }
    
    return true;
  } catch (error) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ —Å retry –ª–æ–≥–∏–∫–æ–π
    if (error.code === 'ECONNRESET' || error.code === 'ENOTFOUND' || error.code === 'ETIMEDOUT') {
      console.log(`   ‚ö†Ô∏è  –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤–∞–ø–µ ${tokenData.symbol}: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ`);
      
      // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞ –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
      try {
        console.log(`   üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–≤–∞–ø–∞ ${tokenData.symbol}...`);
        await new Promise(resolve => setTimeout(resolve, 2000)); // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
        
        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
        const retryQuote = await relayBridge.getQuote(quoteParams);
        
        if (retryQuote && retryQuote.steps && retryQuote.steps.length > 0) {
          console.log(`   ‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–≤–∞–ø...`);
          
          // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–≤–∞–ø —Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∫–æ—Ç–∏—Ä–æ–≤–∫–æ–π
          const retryResult = await relayBridge.executeSteps(retryQuote.steps, provider, signer);
          
          if (retryResult && Array.isArray(retryResult)) {
            const failedSteps = retryResult.filter(step => step.status === 'failed');
            if (failedSteps.length === 0) {
              console.log(`   ‚úÖ –°–≤–∞–ø ${tokenData.symbol} –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–∞`);
              
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ —É—Å–ø–µ—Ö–∞ –≤ UI
              if (global.broadcastLog) {
                global.broadcastLog({
                  type: 'token_operation',
                  operation: 'swap',
                  data: {
                    token: {
                      symbol: tokenData.symbol,
                      amount: actualAmountFormatted,
                      logo_url: tokenData.logo_url,
                      usd_value: usdValue.toFixed(2)
                    },
                    chain: chain.toUpperCase(),
                    target: chain === 'base' ? 'ETH' : '–Ω–∞—Ç–∏–≤–Ω—ã–π',
                    status: 'success',
                    output: `${outputFormatted} ${chain === 'base' ? 'ETH' : '–Ω–∞—Ç–∏–≤–Ω—ã–π'}`
                  }
                }, 'success');
              }
              
              // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω)
              if (shouldDelayAfter) {
                await transactionDelay();
              }
              
              return true;
            }
          }
        }
      } catch (retryError) {
        console.log(`   ‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: ${retryError.message}`);
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ UI –æ –Ω–µ—É–¥–∞—á–µ
      if (global.broadcastLog) {
        global.broadcastLog({
          type: 'token_operation',
          operation: 'swap',
          data: {
            token: {
              symbol: tokenData.symbol,
              amount: typeof actualAmountFormatted !== 'undefined' ? actualAmountFormatted : 'N/A',
              logo_url: tokenData.logo_url,
              usd_value: typeof usdValue !== 'undefined' ? usdValue.toFixed(2) : '0.00'
            },
            chain: chain.toUpperCase(),
            target: chain === 'base' ? 'ETH' : '–Ω–∞—Ç–∏–≤–Ω—ã–π',
            status: 'skipped',
            reason: '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞'
          }
        }, 'warning');
      }
      
      return false;
    }
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
    const safeAmount = typeof actualAmountFormatted !== 'undefined' ? actualAmountFormatted : 'N/A';
    const safeUsdValue = typeof usdValue !== 'undefined' ? usdValue.toFixed(2) : '0.00';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø—Ä–∏—á–∏–Ω—É –æ—à–∏–±–∫–∏
    let errorReason = '–°–≤–∞–ø –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
    let errorStatus = 'skipped';
    
    if (error.response && error.response.data) {
      const errorCode = error.response.data.errorCode;
      const errorMessage = error.response.data.message || '';
      
      // –ö–∞—Ä—Ç–∞ –æ—à–∏–±–æ–∫ –¥–ª—è UI
      const uiErrorMap = {
        'AMOUNT_TOO_LOW': { reason: '–°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞', status: 'skipped' },
        'NO_SWAP_ROUTES_FOUND': { reason: '–°–≤–∞–ø –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', status: 'skipped' },
        'INVALID_INPUT_CURRENCY': { reason: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–æ–∫–µ–Ω', status: 'skipped' },
        'UNSUPPORTED_CURRENCY': { reason: '–¢–æ–∫–µ–Ω –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è', status: 'skipped' },
        'INSUFFICIENT_FUNDS': { reason: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', status: 'failed' },
        'INSUFFICIENT_LIQUIDITY': { reason: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏', status: 'failed' }
      };
      
      if (errorCode && uiErrorMap[errorCode]) {
        errorReason = uiErrorMap[errorCode].reason;
        errorStatus = uiErrorMap[errorCode].status;
      } else if (errorMessage.toLowerCase().includes('no route') || errorMessage.toLowerCase().includes('routes not found')) {
        errorReason = '–°–≤–∞–ø –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
        errorStatus = 'skipped';
      } else if (errorMessage.toLowerCase().includes('too low') || errorMessage.toLowerCase().includes('minimum')) {
        errorReason = '–°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞';
        errorStatus = 'skipped';
      }
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –æ—à–∏–±–∫–∏ –≤ UI
    if (global.broadcastLog) {
      global.broadcastLog({
        type: 'token_operation',
        operation: 'swap',
        data: {
          token: {
            symbol: tokenData.symbol,
            amount: safeAmount,
            logo_url: tokenData.logo_url,
            usd_value: safeUsdValue
          },
          chain: chain.toUpperCase(),
          target: chain === 'base' ? 'ETH' : '–Ω–∞—Ç–∏–≤–Ω—ã–π',
          status: errorStatus,
          reason: errorReason
        }
      }, errorStatus === 'failed' ? 'error' : 'warning');
    }
    
    handleRelayError(error, tokenData.symbol, '—Å–≤–∞–ø–∞', chain);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –¥–ª—è –±—Ä–∏–¥–∂–∞
async function findMinimumBridgeAmount(wallet, sourceChain, targetChain, nativeTokenData) {
  const sourceChainId = chainMapper.getChainId(sourceChain);
  const targetChainId = chainMapper.getChainId(targetChain);
  
  if (!sourceChainId || !targetChainId) {
    return null;
  }
  
  const provider = await createProviderWithFallback(sourceChainId);
  if (!provider) {
    return null;
  }
  
  try {
    const signer = new ethers.Wallet(wallet.privateKey, provider);
    const currentNativeBalance = await provider.getBalance(wallet.address);
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
    let minAmount = BigInt('1000000000000000'); // 0.001 ETH
    let maxAmount = currentNativeBalance;
    let optimalAmount = null;
    
    // –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
    while (minAmount <= maxAmount) {
      const testAmount = (minAmount + maxAmount) / 2n;
      
      const quoteParams = {
        user: wallet.address,
        recipient: wallet.address,
        originChainId: sourceChainId,
        destinationChainId: targetChainId,
        originCurrency: '0x0000000000000000000000000000000000000000',
        destinationCurrency: '0x0000000000000000000000000000000000000000',
        amount: testAmount.toString(),
        tradeType: 'EXACT_INPUT'
      };
      
      try {
        const quote = await relayBridge.getQuote(quoteParams);
        
        if (quote.steps && quote.steps.length > 0) {
          // –ú–∞—Ä—à—Ä—É—Ç –Ω–∞–π–¥–µ–Ω, —É–º–µ–Ω—å—à–∞–µ–º —Å—É–º–º—É
          optimalAmount = testAmount;
          maxAmount = testAmount - 1n;
        } else {
          // –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—É–º–º—É
          minAmount = testAmount + 1n;
        }
      } catch (error) {
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ AMOUNT_TOO_LOW, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—É–º–º—É
        if (error.errorCode === 'AMOUNT_TOO_LOW' || error.message?.includes('amount too low')) {
          minAmount = testAmount + 1n;
        } else {
          // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—É–º–º—É
          minAmount = testAmount + 1n;
        }
      }
    }
    
    return optimalAmount;
    
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã: ${error.message}`);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—Ä–∏–¥–∂–∏–Ω–≥–∞ –≤ –ª—é–±—É—é —Ü–µ–ª–µ–≤—É—é —Å–µ—Ç—å
async function bridgeToTargetNetwork(wallet, sourceChain, nativeTokenData, targetChain, shouldDelayAfter = false) {
  const sourceChainId = chainMapper.getChainId(sourceChain);
  const targetChainId = chainMapper.getChainId(targetChain);
  
  if (!sourceChainId || !targetChainId) {
    console.log(`   ‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å–µ—Ç—å: ${sourceChain} –∏–ª–∏ ${targetChain}`);
    return false;
  }
  
  if (sourceChain === targetChain) {
    console.log(`   üìç –ò—Å—Ö–æ–¥–Ω–∞—è –∏ —Ü–µ–ª–µ–≤–∞—è —Å–µ—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã - –±—Ä–∏–¥–∂ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è`);
    return false;
  }
  
  const provider = await createProviderWithFallback(sourceChainId);
  if (!provider) {
    console.log(`   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±—Ä–∏–¥–∂ - RPC –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è ${getChainName(sourceChainId)}`);
    return false;
  }
  
  try {
    const signer = new ethers.Wallet(wallet.privateKey, provider);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ rawAmount
    if (!nativeTokenData.rawAmount) {
      return false;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    const currentNativeBalance = await provider.getBalance(wallet.address);
    const originalAmount = BigInt(nativeTokenData.rawAmount);
    
    console.log(`   üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${(Number(currentNativeBalance) / Math.pow(10, 18)).toFixed(8)} ${nativeTokenData.symbol}`);
    
    if (currentNativeBalance > originalAmount) {
      const increaseAmount = currentNativeBalance - originalAmount;
      const increaseFormatted = (Number(increaseAmount) / Math.pow(10, 18)).toFixed(8);
      console.log(`   üí∞ –ë–∞–ª–∞–Ω—Å —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ ${increaseFormatted} ${nativeTokenData.symbol} –ø–æ—Å–ª–µ —Å–≤–∞–ø–æ–≤`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –≤ USD
    const usdValue = (Number(currentNativeBalance) / Math.pow(10, 18)) * nativeTokenData.price;
    const minBridgeAmountUsd = 0.01;
    
    if (usdValue < minBridgeAmountUsd) {
      console.log(`   ‚ö†Ô∏è –°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ –¥–ª—è –±—Ä–∏–¥–∂–∞`);
      console.log(`   üí∞ –î–æ—Å—Ç—É–ø–Ω–æ: $${usdValue.toFixed(4)}, –º–∏–Ω–∏–º—É–º: $${minBridgeAmountUsd}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ UI
      if (global.broadcastLog) {
        global.broadcastLog({
          type: 'token_operation',
          operation: 'bridge',
          data: {
            token: {
              symbol: nativeTokenData.symbol,
              amount: (Number(currentNativeBalance) / Math.pow(10, 18)).toFixed(8),
              logo_url: nativeTokenData.logo_url,
              usd_value: usdValue.toFixed(2)
            },
            chain: sourceChain.toUpperCase(),
            target: targetChain.toUpperCase(),
            status: 'skipped',
            reason: '–°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ –¥–ª—è –±—Ä–∏–¥–∂–∞'
          }
        }, 'warning');
      }
      
      return false;
    }
    
    console.log(`   üåâ –ë—Ä–∏–¥–∂ ${(Number(currentNativeBalance) / Math.pow(10, 18)).toFixed(8)} ${nativeTokenData.symbol} ‚Üí ${targetChain.toUpperCase()}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è –±—Ä–∏–¥–∂–∞ —Å –ø–æ–ª–Ω–æ–π —Å—É–º–º–æ–π
    const quoteParams = {
      user: wallet.address,
      recipient: wallet.address,
      originChainId: sourceChainId,
      destinationChainId: targetChainId,
      originCurrency: '0x0000000000000000000000000000000000000000',
      destinationCurrency: '0x0000000000000000000000000000000000000000',
      amount: currentNativeBalance.toString(),
      tradeType: 'EXACT_INPUT'
    };
    
    console.log(`   üîç –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è –±—Ä–∏–¥–∂–∞...`);
    
    // Retry –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è getQuote
    let quote;
    let retryCount = 0;
    const maxRetries = 3;
    
    while (retryCount < maxRetries) {
      try {
        quote = await relayBridge.getQuote(quoteParams);
        break; // –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –∫–æ—Ç–∏—Ä–æ–≤–∫—É
      } catch (error) {
        retryCount++;
        
        // –ï—Å–ª–∏ —ç—Ç–æ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –∏ –µ—Å—Ç—å –µ—â–µ –ø–æ–ø—ã—Ç–∫–∏
        if ((error.code === 'ECONNRESET' || error.code === 'ENOTFOUND' || error.code === 'ETIMEDOUT') && retryCount < maxRetries) {
          console.log(`   üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${retryCount}/${maxRetries} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–∫–∏...`);
          await new Promise(resolve => setTimeout(resolve, 2000 * retryCount)); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
          continue;
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏
        handleRelayError(error, nativeTokenData.symbol, '–±—Ä–∏–¥–∂–∞', sourceChain);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ UI
        if (global.broadcastLog) {
          global.broadcastLog({
            type: 'token_operation',
            operation: 'bridge',
            data: {
              token: {
                symbol: nativeTokenData.symbol,
                amount: (Number(currentNativeBalance) / Math.pow(10, 18)).toFixed(8),
                logo_url: nativeTokenData.logo_url,
                usd_value: usdValue.toFixed(2)
              },
              chain: sourceChain.toUpperCase(),
              target: targetChain.toUpperCase(),
              status: 'skipped',
              reason: '–ö–æ—Ç–∏—Ä–æ–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
            }
          }, 'warning');
        }
        
        return false;
      }
    }
    
    if (!quote.steps || quote.steps.length === 0) {
      console.log(`   ‚ö†Ô∏è –ú–∞—Ä—à—Ä—É—Ç –±—Ä–∏–¥–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ UI
      if (global.broadcastLog) {
        global.broadcastLog({
          type: 'token_operation',
          operation: 'bridge',
          data: {
            token: {
              symbol: nativeTokenData.symbol,
              amount: (Number(currentNativeBalance) / Math.pow(10, 18)).toFixed(8),
              logo_url: nativeTokenData.logo_url,
              usd_value: usdValue.toFixed(2)
            },
            chain: sourceChain.toUpperCase(),
            target: targetChain.toUpperCase(),
            status: 'skipped',
            reason: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
          }
        }, 'warning');
      }
      
      return false;
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–∏—Å—Å–∏–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ Relay
    let totalFeesInNative = 0n;
    let gasCostInNative = 0n;
    let relayerCostInNative = 0n;
    let relayerCostInOtherCurrency = null;
    let hasRelayerFeesInOtherCurrency = false;
    
    if (quote.fees) {
      console.log(`   üí∏ –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∏—Å—Å–∏–π –∏–∑ Relay:`);
      
      // –ì–∞–∑ –∫–æ–º–∏—Å—Å–∏–∏
      if (quote.fees.gas && quote.fees.gas.amount) {
        const gasAmount = BigInt(quote.fees.gas.amount);
        const gasCurrency = quote.fees.gas.currency;
        const gasDecimals = gasCurrency?.decimals || 18;
        const gasSymbol = gasCurrency?.symbol || nativeTokenData.symbol;
        
        // –ï—Å–ª–∏ –≥–∞–∑ –≤ –Ω–∞—Ç–∏–≤–Ω–æ–π –≤–∞–ª—é—Ç–µ
        if (gasSymbol === nativeTokenData.symbol) {
          gasCostInNative = gasAmount;
          console.log(`   ‚õΩ –°—Ç–æ–∏–º–æ—Å—Ç—å –≥–∞–∑–∞: ${(Number(gasAmount) / Math.pow(10, gasDecimals)).toFixed(8)} ${gasSymbol}`);
        } else {
          console.log(`   ‚õΩ –°—Ç–æ–∏–º–æ—Å—Ç—å –≥–∞–∑–∞ –≤ ${gasSymbol}: ${(Number(gasAmount) / Math.pow(10, gasDecimals)).toFixed(8)}`);
        }
      }
      
      // Relayer –∫–æ–º–∏—Å—Å–∏–∏
      if (quote.fees.relayer && quote.fees.relayer.amount) {
        const relayerAmount = BigInt(quote.fees.relayer.amount);
        const relayerCurrency = quote.fees.relayer.currency;
        const relayerDecimals = relayerCurrency?.decimals || 18;
        const relayerSymbol = relayerCurrency?.symbol || 'UNKNOWN';
        
        console.log(`   üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å relayer: ${(Number(relayerAmount) / Math.pow(10, relayerDecimals)).toFixed(8)} ${relayerSymbol}`);
        
        // –ï—Å–ª–∏ relayer –∫–æ–º–∏—Å—Å–∏—è –≤ –Ω–∞—Ç–∏–≤–Ω–æ–π –≤–∞–ª—é—Ç–µ
        if (relayerSymbol === nativeTokenData.symbol) {
          relayerCostInNative = relayerAmount;
        } else {
          // Relayer –∫–æ–º–∏—Å—Å–∏—è –≤ –¥—Ä—É–≥–æ–π –≤–∞–ª—é—Ç–µ
          relayerCostInOtherCurrency = {
            amount: relayerAmount,
            symbol: relayerSymbol,
            decimals: relayerDecimals
          };
          hasRelayerFeesInOtherCurrency = true;
          console.log(`   üí∏ Relayer –∫–æ–º–∏—Å—Å–∏—è –≤ ${relayerSymbol} - –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–∞—Å—á–µ—Ç –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞`);
        }
      }
      
      // –û–±—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –≤ –Ω–∞—Ç–∏–≤–Ω–æ–π –≤–∞–ª—é—Ç–µ
      totalFeesInNative = gasCostInNative + relayerCostInNative;
      console.log(`   üí∞ –û–±—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –≤ ${nativeTokenData.symbol}: ${(Number(totalFeesInNative) / Math.pow(10, 18)).toFixed(8)}`);
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è –±—Ä–∏–¥–∂–∞
    let optimalBridgeAmount = currentNativeBalance;
    
    // –í—ã—á–∏—Å–ª—è–µ–º USD –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—Ä–∞–Ω–µ–µ (–±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞ optimalBridgeAmount)
    let actualUsdValue = (Number(currentNativeBalance) / Math.pow(10, 18)) * nativeTokenData.price;
    
    // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å relayer –∫–æ–º–∏—Å—Å–∏–∏ –≤ –¥—Ä—É–≥–æ–π –≤–∞–ª—é—Ç–µ, –Ω—É–∂–Ω–æ –∏—Ö —É—á–µ—Å—Ç—å
    if (hasRelayerFeesInOtherCurrency && relayerCostInOtherCurrency) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ relayer —Ç–æ–∫–µ–Ω —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –º–æ–Ω–µ—Ç–æ–π
      const stableCoins = ['USDC', 'USDT', 'DAI', 'BUSD', 'TUSD', 'USD'];
      const isStableCoin = stableCoins.some(coin => 
        relayerCostInOtherCurrency.symbol.toUpperCase().includes(coin)
      );
      
      if (isStableCoin) {
        // –î–ª—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –º–æ–Ω–µ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é USD —Å—Ç–æ–∏–º–æ—Å—Ç—å
        const relayerAmountInUSD = Number(relayerCostInOtherCurrency.amount) / Math.pow(10, relayerCostInOtherCurrency.decimals);
        const nativeTokenPrice = nativeTokenData.price;
        
        if (nativeTokenPrice && nativeTokenPrice > 0) {
          // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –≤ –Ω–∞—Ç–∏–≤–Ω–æ–π –≤–∞–ª—é—Ç–µ
          const relayerEquivalentInNative = BigInt(Math.floor(relayerAmountInUSD / nativeTokenPrice * Math.pow(10, 18)));
          
          console.log(`   üí∞ Relayer –∫–æ–º–∏—Å—Å–∏—è –≤ ${relayerCostInOtherCurrency.symbol}: $${relayerAmountInUSD.toFixed(4)}`);
          console.log(`   üí∞ –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –≤ ${nativeTokenData.symbol}: ${(Number(relayerEquivalentInNative) / Math.pow(10, 18)).toFixed(8)}`);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∫ –æ–±—â–∏–º –∫–æ–º–∏—Å—Å–∏—è–º –≤ –Ω–∞—Ç–∏–≤–Ω–æ–π –≤–∞–ª—é—Ç–µ
          totalFeesInNative += relayerEquivalentInNative;
        }
      } else {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —á–µ—Ä–µ–∑ API
        try {
          const relayerTokenPrice = await relayBridge.getTokenPrice(relayerCostInOtherCurrency.symbol, sourceChainId);
          const nativeTokenPrice = nativeTokenData.price;
          
          if (relayerTokenPrice && nativeTokenPrice && nativeTokenPrice > 0) {
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º USD —Å—Ç–æ–∏–º–æ—Å—Ç—å relayer –∫–æ–º–∏—Å—Å–∏–∏
            const relayerAmountInUSD = (Number(relayerCostInOtherCurrency.amount) / Math.pow(10, relayerCostInOtherCurrency.decimals)) * relayerTokenPrice;
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –≤ –Ω–∞—Ç–∏–≤–Ω–æ–π –≤–∞–ª—é—Ç–µ
            const relayerEquivalentInNative = BigInt(Math.floor(relayerAmountInUSD / nativeTokenPrice * Math.pow(10, 18)));
            
            console.log(`   üí∞ Relayer –∫–æ–º–∏—Å—Å–∏—è –≤ ${relayerCostInOtherCurrency.symbol}: $${relayerAmountInUSD.toFixed(4)}`);
            console.log(`   üí∞ –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –≤ ${nativeTokenData.symbol}: ${(Number(relayerEquivalentInNative) / Math.pow(10, 18)).toFixed(8)}`);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫ –æ–±—â–∏–º –∫–æ–º–∏—Å—Å–∏—è–º –≤ –Ω–∞—Ç–∏–≤–Ω–æ–π –≤–∞–ª—é—Ç–µ
            totalFeesInNative += relayerEquivalentInNative;
          }
        } catch (error) {
          console.log(`   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É ${relayerCostInOtherCurrency.symbol}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥`);
          
          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
          // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ relayer –∫–æ–º–∏—Å—Å–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–π
          const conservativeRelayerFee = BigInt('50000000000000000'); // 0.05 ETH –∫–∞–∫ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
          totalFeesInNative += conservativeRelayerFee;
          console.log(`   üí∞ –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—É—é –æ—Ü–µ–Ω–∫—É relayer –∫–æ–º–∏—Å—Å–∏–∏: ${(Number(conservativeRelayerFee) / Math.pow(10, 18)).toFixed(8)} ${nativeTokenData.symbol}`);
        }
      }
    }
    
    // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –∫–æ–º–∏—Å—Å–∏–∏ –≤ –Ω–∞—Ç–∏–≤–Ω–æ–π –≤–∞–ª—é—Ç–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö
    if (totalFeesInNative > 0) {
      // –û—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –±—É—Ñ–µ—Ä –¥–ª—è –∫–æ–º–∏—Å—Å–∏–π (15% –æ—Ç –∫–æ–º–∏—Å—Å–∏–π –¥–ª—è —É—á–µ—Ç–∞ –∫–æ–ª–µ–±–∞–Ω–∏–π —Ü–µ–Ω)
      const feeBuffer = totalFeesInNative * 15n / 100n;
      const totalReserved = totalFeesInNative + feeBuffer;
      
      if (currentNativeBalance > totalReserved) {
        optimalBridgeAmount = currentNativeBalance - totalReserved;
        console.log(`   üí∞ –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –±—Ä–∏–¥–∂–∞: ${(Number(optimalBridgeAmount) / Math.pow(10, 18)).toFixed(8)} ${nativeTokenData.symbol}`);
        console.log(`   üí∞ –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –∫–æ–º–∏—Å—Å–∏–π: ${(Number(totalReserved) / Math.pow(10, 18)).toFixed(8)} ${nativeTokenData.symbol}`);
      } else {
        console.log(`   ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–º–∏—Å—Å–∏–π`);
        console.log(`   üí∞ –ë–∞–ª–∞–Ω—Å: ${(Number(currentNativeBalance) / Math.pow(10, 18)).toFixed(8)} ${nativeTokenData.symbol}`);
        console.log(`   üí∞ –¢—Ä–µ–±—É–µ—Ç—Å—è: ${(Number(totalReserved) / Math.pow(10, 18)).toFixed(8)} ${nativeTokenData.symbol}`);
        return false;
      }
    } else {
      // –ï—Å–ª–∏ –∫–æ–º–∏—Å—Å–∏–∏ –Ω–µ –≤ –Ω–∞—Ç–∏–≤–Ω–æ–π –≤–∞–ª—é—Ç–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±—É—Ñ–µ—Ä
      const minBuffer = BigInt('10000000000000000'); // 0.01 ETH
      if (currentNativeBalance > minBuffer) {
        optimalBridgeAmount = currentNativeBalance - minBuffer;
        console.log(`   üí∞ –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –±—Ä–∏–¥–∂–∞: ${(Number(optimalBridgeAmount) / Math.pow(10, 18)).toFixed(8)} ${nativeTokenData.symbol}`);
        console.log(`   üí∞ –û—Å—Ç–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä: ${(Number(minBuffer) / Math.pow(10, 18)).toFixed(8)} ${nativeTokenData.symbol}`);
      } else {
        console.log(`   ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞`);
        return false;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è –±—Ä–∏–¥–∂–∞
    const minBridgeAmount = BigInt('30000000000000'); // 0.00005 ETH
    if (optimalBridgeAmount < minBridgeAmount) {
      console.log(`   ‚ö†Ô∏è –°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ –¥–ª—è –±—Ä–∏–¥–∂–∞ –ø–æ—Å–ª–µ –≤—ã—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π`);
      console.log(`   üí∞ –î–æ—Å—Ç—É–ø–Ω–æ: ${(Number(optimalBridgeAmount) / Math.pow(10, 18)).toFixed(8)} ETH`);
      console.log(`   üìè –ú–∏–Ω–∏–º—É–º: ${(Number(minBridgeAmount) / Math.pow(10, 18)).toFixed(8)} ETH`);
      return false;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –∫–æ—Ç–∏—Ä–æ–≤–∫—É —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–æ–π
    const optimizedQuoteParams = {
      ...quoteParams,
      amount: optimalBridgeAmount.toString()
    };
    
    console.log(`   üîç –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–æ—Ç–∏—Ä–æ–≤–∫—É...`);
    
    // Retry –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
    let finalQuote;
    let finalRetryCount = 0;
    const maxFinalRetries = 3;
    
    while (finalRetryCount < maxFinalRetries) {
      try {
        finalQuote = await relayBridge.getQuote(optimizedQuoteParams);
        break; // –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –∫–æ—Ç–∏—Ä–æ–≤–∫—É
      } catch (error) {
        finalRetryCount++;
        
        // –ï—Å–ª–∏ —ç—Ç–æ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –∏ –µ—Å—Ç—å –µ—â–µ –ø–æ–ø—ã—Ç–∫–∏
        if ((error.code === 'ECONNRESET' || error.code === 'ENOTFOUND' || error.code === 'ETIMEDOUT') && finalRetryCount < maxFinalRetries) {
          console.log(`   üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${finalRetryCount}/${maxFinalRetries} –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∫–æ—Ç–∏—Ä–æ–≤–∫–∏...`);
          await new Promise(resolve => setTimeout(resolve, 2000 * finalRetryCount)); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
          continue;
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∫–æ—Ç–∏—Ä–æ–≤–∫–∏: ${error.message}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ UI
        if (global.broadcastLog) {
          global.broadcastLog({
            type: 'token_operation',
            operation: 'bridge',
            data: {
              token: {
                symbol: nativeTokenData.symbol,
                amount: (Number(optimalBridgeAmount) / Math.pow(10, 18)).toFixed(8),
                logo_url: nativeTokenData.logo_url,
                usd_value: actualUsdValue.toFixed(2)
              },
              chain: sourceChain.toUpperCase(),
              target: targetChain.toUpperCase(),
              status: 'skipped',
              reason: '–§–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ—Ç–∏—Ä–æ–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
            }
          }, 'warning');
        }
        
        return false;
      }
    }
    
    if (!finalQuote.steps || finalQuote.steps.length === 0) {
      console.log(`   ‚ùå –ú–∞—Ä—à—Ä—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã`);
      return false;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é —Å—É–º–º—É –∏–∑ details
    let outputAmount = null;
    let outputFormatted = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    
    if (finalQuote.details?.currencyOut?.amount) {
      outputAmount = finalQuote.details.currencyOut.amount;
    } else {
      // Fallback –Ω–∞ –∏—Å—Ö–æ–¥–Ω—É—é —Å—É–º–º—É
      outputAmount = optimalBridgeAmount.toString();
    }
    
    if (outputAmount && !isNaN(Number(outputAmount))) {
      outputFormatted = (Number(outputAmount) / Math.pow(10, 18)).toFixed(8);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º USD –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
    actualUsdValue = (Number(optimalBridgeAmount) / Math.pow(10, 18)) * nativeTokenData.price;
    const actualAmountFormatted = (Number(optimalBridgeAmount) / Math.pow(10, 18)).toFixed(8);
    
    console.log(`   üåâ –ë—Ä–∏–¥–∂ ${actualAmountFormatted} ${nativeTokenData.symbol} ‚Üí ${outputFormatted} ETH –≤ ${targetChain.toUpperCase()}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –Ω–∞—á–∞–ª–∞ –±—Ä–∏–¥–∂–∏–Ω–≥–∞ –≤ UI
    if (global.broadcastLog) {
      global.broadcastLog({
        type: 'token_operation',
        operation: 'bridge',
        data: {
          token: {
            symbol: nativeTokenData.symbol,
            amount: actualAmountFormatted,
            logo_url: nativeTokenData.logo_url,
            usd_value: actualUsdValue.toFixed(2)
          },
          chain: sourceChain.toUpperCase(),
          target: targetChain.toUpperCase(),
          status: 'started'
        }
      }, 'info');
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –±—Ä–∏–¥–∂ —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
    console.log(`   üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º –±—Ä–∏–¥–∂ —á–µ—Ä–µ–∑ Relay...`);
    
    // Retry –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è executeSteps
    let result;
    let executeRetryCount = 0;
    const maxExecuteRetries = 2;
    
    while (executeRetryCount < maxExecuteRetries) {
      try {
        result = await relayBridge.executeSteps(finalQuote.steps, provider, signer);
        break; // –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏
      } catch (error) {
        executeRetryCount++;
        
        // –ï—Å–ª–∏ —ç—Ç–æ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –∏ –µ—Å—Ç—å –µ—â–µ –ø–æ–ø—ã—Ç–∫–∏
        if ((error.code === 'ECONNRESET' || error.code === 'ENOTFOUND' || error.code === 'ETIMEDOUT') && executeRetryCount < maxExecuteRetries) {
          console.log(`   üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ${executeRetryCount}/${maxExecuteRetries} –¥–ª—è –±—Ä–∏–¥–∂–∞...`);
          await new Promise(resolve => setTimeout(resolve, 3000 * executeRetryCount)); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
          continue;
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±—Ä–∏–¥–∂–∞: ${error.message}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ UI
        if (global.broadcastLog) {
          global.broadcastLog({
            type: 'token_operation',
            operation: 'bridge',
            data: {
              token: {
                symbol: nativeTokenData.symbol,
                amount: actualAmountFormatted,
                logo_url: nativeTokenData.logo_url,
                usd_value: actualUsdValue.toFixed(2)
              },
              chain: sourceChain.toUpperCase(),
              target: targetChain.toUpperCase(),
              status: 'failed',
              reason: '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
            }
          }, 'error');
        }
        
        return false;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    if (result && Array.isArray(result)) {
      const failedSteps = result.filter(step => step.status === 'failed');
      if (failedSteps.length === 0) {
        console.log(`   ‚úÖ –ë—Ä–∏–¥–∂ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ —É—Å–ø–µ—Ö–∞ –±—Ä–∏–¥–∂–∏–Ω–≥–∞ –≤ UI
        if (global.broadcastLog) {
          global.broadcastLog({
            type: 'token_operation',
            operation: 'bridge',
            data: {
              token: {
                symbol: nativeTokenData.symbol,
                amount: actualAmountFormatted,
                logo_url: nativeTokenData.logo_url,
                usd_value: actualUsdValue.toFixed(2)
              },
              chain: sourceChain.toUpperCase(),
              target: targetChain.toUpperCase(),
              status: 'success',
              output: `${outputFormatted} ETH`
            }
          }, 'success');
        }
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
        if (shouldDelayAfter) {
          await transactionDelay();
        }
        
        return true;
      } else {
        const errors = failedSteps.map(step => step.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞').join(', ');
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –±—Ä–∏–¥–∂–∞: ${errors}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –æ—à–∏–±–∫–∏ –±—Ä–∏–¥–∂–∏–Ω–≥–∞ –≤ UI
        if (global.broadcastLog) {
          global.broadcastLog({
            type: 'token_operation',
            operation: 'bridge',
            data: {
              token: {
                symbol: nativeTokenData.symbol,
                amount: actualAmountFormatted,
                logo_url: nativeTokenData.logo_url,
                usd_value: actualUsdValue.toFixed(2)
              },
              chain: sourceChain.toUpperCase(),
              target: targetChain.toUpperCase(),
              status: 'error',
              error: errors
            }
          }, 'error');
        }
        
        return false;
      }
    } else if (result && result.success) {
      console.log(`   ‚úÖ –ë—Ä–∏–¥–∂ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ —É—Å–ø–µ—Ö–∞ –±—Ä–∏–¥–∂–∏–Ω–≥–∞ –≤ UI
      if (global.broadcastLog) {
        global.broadcastLog({
          type: 'token_operation',
          operation: 'bridge',
          data: {
            token: {
              symbol: nativeTokenData.symbol,
              amount: actualAmountFormatted,
              logo_url: nativeTokenData.logo_url,
              usd_value: actualUsdValue.toFixed(2)
            },
            chain: sourceChain.toUpperCase(),
            target: targetChain.toUpperCase(),
            status: 'success',
            output: `${outputFormatted} ETH`
          }
        }, 'success');
      }
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
      if (shouldDelayAfter) {
        await transactionDelay();
      }
      
      return true;
    } else {
      console.log(`   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–∏–¥–∂–∞`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –æ—à–∏–±–∫–∏ –±—Ä–∏–¥–∂–∏–Ω–≥–∞ –≤ UI
      if (global.broadcastLog) {
        global.broadcastLog({
          type: 'token_operation',
          operation: 'bridge',
          data: {
            token: {
              symbol: nativeTokenData.symbol,
              amount: actualAmountFormatted,
              logo_url: nativeTokenData.logo_url,
              usd_value: actualUsdValue.toFixed(2)
            },
            chain: sourceChain.toUpperCase(),
            target: targetChain.toUpperCase(),
            status: 'error',
            error: '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç'
          }
        }, 'error');
      }
      
      return false;
    }
    
  } catch (error) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ —Å retry –ª–æ–≥–∏–∫–æ–π
    if (error.code === 'ECONNRESET' || error.code === 'ENOTFOUND' || error.code === 'ETIMEDOUT') {
      console.log(`   ‚ö†Ô∏è  –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–∏–¥–∂–∏–Ω–≥–µ: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ`);
      
      // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞ –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
      try {
        console.log(`   üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±—Ä–∏–¥–∂–∏–Ω–≥–∞...`);
        await new Promise(resolve => setTimeout(resolve, 3000)); // –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã
        
        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
        const retryQuote = await relayBridge.getQuote(quoteParams);
        
        if (retryQuote && retryQuote.steps && retryQuote.steps.length > 0) {
          console.log(`   ‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –±—Ä–∏–¥–∂...`);
          
          // –í—ã–ø–æ–ª–Ω—è–µ–º –±—Ä–∏–¥–∂ —Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∫–æ—Ç–∏—Ä–æ–≤–∫–æ–π
          const retryResult = await relayBridge.executeSteps(retryQuote.steps, provider, signer);
          
          if (retryResult && Array.isArray(retryResult)) {
            const failedSteps = retryResult.filter(step => step.status === 'failed');
            if (failedSteps.length === 0) {
              console.log(`   ‚úÖ –ë—Ä–∏–¥–∂ –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–∞`);
              
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ —É—Å–ø–µ—Ö–∞ –≤ UI
              if (global.broadcastLog) {
                global.broadcastLog({
                  type: 'token_operation',
                  operation: 'bridge',
                  data: {
                    token: {
                      symbol: nativeTokenData.symbol,
                      amount: (Number(optimalBridgeAmount) / Math.pow(10, 18)).toFixed(8),
                      logo_url: nativeTokenData.logo_url,
                      usd_value: actualUsdValue.toFixed(2)
                    },
                    chain: sourceChain.toUpperCase(),
                    target: targetChain.toUpperCase(),
                    status: 'success'
                  }
                }, 'success');
              }
              
              // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
              if (shouldDelayAfter) {
                await transactionDelay();
              }
              
              return true;
            }
          }
        }
      } catch (retryError) {
        console.log(`   ‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: ${retryError.message}`);
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ UI –æ –Ω–µ—É–¥–∞—á–µ
      if (global.broadcastLog) {
        global.broadcastLog({
          type: 'token_operation',
          operation: 'bridge',
          data: {
            token: {
              symbol: nativeTokenData.symbol,
              amount: (Number(optimalBridgeAmount) / Math.pow(10, 18)).toFixed(8),
              logo_url: nativeTokenData.logo_url,
              usd_value: actualUsdValue.toFixed(2)
            },
            chain: sourceChain.toUpperCase(),
            target: targetChain.toUpperCase(),
            status: 'skipped',
            reason: '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞'
          }
        }, 'warning');
      }
      
      return false;
    }
    
    // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –±—Ä–∏–¥–∂–∏–Ω–≥–∞: ${error.message}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –æ—à–∏–±–∫–∏ –±—Ä–∏–¥–∂–∏–Ω–≥–∞ –≤ UI
    if (global.broadcastLog) {
      global.broadcastLog({
        type: 'token_operation',
        operation: 'bridge',
        data: {
          token: {
            symbol: nativeTokenData.symbol,
            amount: (Number(nativeTokenData.rawAmount) / Math.pow(10, 18)).toFixed(8),
            logo_url: nativeTokenData.logo_url,
            usd_value: ((Number(nativeTokenData.rawAmount) / Math.pow(10, 18)) * nativeTokenData.price).toFixed(2)
          },
          chain: sourceChain.toUpperCase(),
          target: targetChain.toUpperCase(),
          status: 'error',
          error: error.message
        }
      }, 'error');
    }
    
    return false;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π
function isNetworkExcluded(network) {
  const config = getConfig();
  const excludedNetworks = config.excludedNetworks || [];
  return excludedNetworks.includes(network);
}

// –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
function validateConfiguration() {
  const config = getConfig();
  const collectionMode = config.collection?.mode || 'collect_to_target';
  const targetNetworks = config.collection?.targetNetworks || [];
  const targetNetwork = config.collection?.targetNetwork; // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ü–µ–ª–µ–≤—ã–µ —Å–µ—Ç–∏
  if (targetNetworks.length === 0 && !targetNetwork) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò');
    
    if (collectionMode === 'collect_to_target') {
      console.error('üìã –†–µ–∂–∏–º: collect_to_target');
      console.error('üö´ –ù–µ —É–∫–∞–∑–∞–Ω—ã —Å–µ—Ç–∏ –¥–ª—è –±—Ä–∏–¥–∂–∏–Ω–≥–∞!');
      console.error('');
      console.error('üìù –ò—Å–ø—Ä–∞–≤—å—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö UI:');
      console.error('   targetNetworks: ["base"]     // –°–±–æ—Ä –≤ Base');
      console.error('   targetNetworks: ["arb"]      // –°–±–æ—Ä –≤ Arbitrum');
      console.error('   targetNetworks: ["op"]       // –°–±–æ—Ä –≤ Optimism');
      console.error('   targetNetworks: ["base", "arb", "op"]   // –°–ª—É—á–∞–π–Ω–∞—è —Å–µ—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞');
    } else {
      console.error('üìã –†–µ–∂–∏–º: swap_to_native');
      console.error('üö´ –ù–µ —É–∫–∞–∑–∞–Ω—ã —Å–µ—Ç–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!');
      console.error('');
      console.error('üìù –ò—Å–ø—Ä–∞–≤—å—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö UI:');
      console.error('   targetNetworks: ["all_chains"]  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–µ—Ç–µ–π');
      console.error('   targetNetworks: ["avax"]        // –¢–æ–ª—å–∫–æ AVAX');
      console.error('   targetNetworks: ["base"]        // –¢–æ–ª—å–∫–æ Base');
      console.error('   targetNetworks: ["arb"]         // –¢–æ–ª—å–∫–æ Arbitrum');
    }
    
    console.error('');
    console.error('üîß –ü–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É');
    process.exit(1);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è swap_to_native
  if (collectionMode === 'swap_to_native') {
    const networksToCheck = targetNetworks.length > 0 ? targetNetworks : [targetNetwork];
    
    for (const network of networksToCheck) {
      if (network !== 'all_chains') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ chainMapper
        const chainId = chainMapper.getChainId(network);
        if (!chainId) {
          console.error('‚ùå –û–®–ò–ë–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò');
          console.error('üìã –†–µ–∂–∏–º: swap_to_native');
          console.error(`üö´ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–µ—Ç—å: "${network}"`);
          console.error('');
          console.error('üìù –°–µ—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∞ –≤ chainMapper.js');
          console.error('   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ç–µ–π –≤ UI');
          console.error('');
          console.error('üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö UI –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–≤—Ç–æ–±—Ä–∏–¥–∂–µ—Ä');
          process.exit(1);
        }
      }
    }
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main(walletsData = null) {
  try {
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    validateConfiguration();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const config = getConfig();
    const collectionMode = config.collection?.mode || 'collect_to_target';
    const targetNetworks = config.collection?.targetNetworks || [];
    const targetNetwork = config.collection?.targetNetwork; // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    
    let modeDescription = '';
    switch (collectionMode) {
      case 'collect_to_target':
        if (targetNetworks.length > 1) {
          const networkNames = targetNetworks.map(net => net.toUpperCase()).join('/');
          modeDescription = `üé≤ –°–±–æ—Ä —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Å–ª—É—á–∞–π–Ω—ã–µ —Å–µ—Ç–∏ (${networkNames})`;
        } else if (targetNetworks.length === 1) {
          modeDescription = `üåâ –°–±–æ—Ä –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤ –≤ ${targetNetworks[0].toUpperCase()}`;
        } else if (targetNetwork === 'random') {
          const fallbackNetworks = ['base', 'arb', 'op'];
          const networkNames = fallbackNetworks.map(net => net.toUpperCase()).join('/');
          modeDescription = `üé≤ –°–±–æ—Ä —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Å–ª—É—á–∞–π–Ω—ã–µ —Å–µ—Ç–∏ (${networkNames})`;
        } else if (targetNetwork) {
          modeDescription = `üåâ –°–±–æ—Ä –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤ –≤ ${targetNetwork.toUpperCase()}`;
        } else {
          modeDescription = 'üåâ –ë—Ä–∏–¥–∂ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –≤—Å–µ—Ö —Å–µ—Ç–µ–π –≤ Base (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)';
        }
        break;
      case 'swap_to_native':
        if (targetNetworks.length === 1 && targetNetworks[0] === 'all_chains') {
          modeDescription = 'üí∞ –°–≤–∞–ø—ã –≤ –Ω–∞—Ç–∏–≤–∫—É –≤–æ –≤—Å–µ—Ö —Å–µ—Ç—è—Ö (–±–µ–∑ –±—Ä–∏–¥–∂–µ–π)';
        } else if (targetNetworks.length === 1) {
          modeDescription = `üí∞ –°–≤–∞–ø—ã –≤ –Ω–∞—Ç–∏–≤–∫—É —Ç–æ–ª—å–∫–æ –≤ —Å–µ—Ç–∏ ${targetNetworks[0].toUpperCase()}`;
        } else if (targetNetworks.length > 1) {
          const networkNames = targetNetworks.map(net => net.toUpperCase()).join('/');
          modeDescription = `üí∞ –°–≤–∞–ø—ã –≤ –Ω–∞—Ç–∏–≤–∫—É –≤ —Å–ª—É—á–∞–π–Ω—ã–µ —Å–µ—Ç–∏ (${networkNames})`;
        } else if (targetNetwork === 'all_chains') {
          modeDescription = 'üí∞ –°–≤–∞–ø—ã –≤ –Ω–∞—Ç–∏–≤–∫—É –≤–æ –≤—Å–µ—Ö —Å–µ—Ç—è—Ö (–±–µ–∑ –±—Ä–∏–¥–∂–µ–π)';
        } else if (targetNetwork) {
          modeDescription = `üí∞ –°–≤–∞–ø—ã –≤ –Ω–∞—Ç–∏–≤–∫—É —Ç–æ–ª—å–∫–æ –≤ —Å–µ—Ç–∏ ${targetNetwork.toUpperCase()}`;
        } else {
          modeDescription = 'üí∞ –°–≤–∞–ø—ã –≤ –Ω–∞—Ç–∏–≤–∫—É –≤–æ –≤—Å–µ—Ö —Å–µ—Ç—è—Ö (–±–µ–∑ –±—Ä–∏–¥–∂–µ–π)';
        }
        break;
    }
    
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–±—Ä–∏–¥–∂–µ—Ä–∞');
    console.log(`üìã –†–µ–∂–∏–º: ${modeDescription}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    const excludedNetworks = config.excludedNetworks || [];
    if (excludedNetworks.length > 0) {
      console.log(`üö´ –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–µ—Ç–∏: ${excludedNetworks.map(n => n.toUpperCase()).join(', ')}`);
    }
    console.log('');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
    if (!walletsData || walletsData.length === 0) {
      console.error('‚ùå –î–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–æ–≤ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã');
      return;
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–æ—à–µ–ª–µ–∫
    for (const walletData of walletsData) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
      if (typeof global !== 'undefined' && global.shouldStop && global.shouldStop()) {
        console.log('‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–±—Ä–∏–¥–∂–µ—Ä–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
      }
      
      try {
        const wallet = new ethers.Wallet(walletData.privateKey);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é —Å–µ—Ç—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
        let walletTargetNetwork;
        
        if (targetNetworks.length > 0) {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É targetNetworks
          if (targetNetworks.length === 1) {
            walletTargetNetwork = targetNetworks[0];
          } else {
            // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å–µ—Ç—å –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
            const randomIndex = Math.floor(Math.random() * targetNetworks.length);
            walletTargetNetwork = targetNetworks[randomIndex];
            console.log(`üíº –ö–æ—à–µ–ª–µ–∫: ${wallet.address} | üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Å–µ—Ç—å: ${walletTargetNetwork.toUpperCase()}`);
          }
        } else if (targetNetwork === 'random') {
          // –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
          const availableNetworks = config.collection?.targetNetworks?.length > 0 
            ? config.collection.targetNetworks 
            : ['base', 'arb', 'op'];
          const randomIndex = Math.floor(Math.random() * availableNetworks.length);
          walletTargetNetwork = availableNetworks[randomIndex];
          console.log(`üíº –ö–æ—à–µ–ª–µ–∫: ${wallet.address} | üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Å–µ—Ç—å: ${walletTargetNetwork.toUpperCase()}`);
        } else {
          // –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
          walletTargetNetwork = targetNetwork;
        }
        
        if (targetNetworks.length <= 1 && targetNetwork !== 'random') {
          console.log(`üíº –ö–æ—à–µ–ª–µ–∫: ${wallet.address} | üéØ –¶–µ–ª–µ–≤–∞—è —Å–µ—Ç—å: ${walletTargetNetwork.toUpperCase()}`);
        } else if (targetNetworks.length <= 1) {
          console.log(`üíº –ö–æ—à–µ–ª–µ–∫: ${wallet.address}`);
        }
        
        const processedBalances = processTokensData(walletData.balances);
        const chainEntries = Object.entries(processedBalances);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–µ—Ç–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        let filteredChainEntries = chainEntries;
        
        // –î–ª—è —Ä–µ–∂–∏–º–∞ swap_to_native —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å–µ—Ç—å—é - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—ë
        if (collectionMode === 'swap_to_native') {
          if (walletTargetNetwork && walletTargetNetwork !== 'all_chains') {
            filteredChainEntries = chainEntries.filter(([chain]) => chain === walletTargetNetwork);
            if (filteredChainEntries.length === 0) {
              console.log(`‚ö†Ô∏è  –°–µ—Ç—å ${walletTargetNetwork.toUpperCase()} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–ª–∞–Ω—Å–∞—Ö –∫–æ—à–µ–ª—å–∫–∞`);
              continue;
            }
            console.log(`üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–µ—Ç—å ${walletTargetNetwork.toUpperCase()}`);
          } else if (walletTargetNetwork === 'all_chains') {
            console.log(`üåê –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–µ—Ç–∏ (—Ç–æ–ª—å–∫–æ —Å–≤–∞–ø—ã)`);
          } else {
            console.log(`üåê –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–µ—Ç–∏ (—Ç–æ–ª—å–∫–æ —Å–≤–∞–ø—ã)`);
          }
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å–µ—Ç—å
        for (let i = 0; i < filteredChainEntries.length; i++) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
          if (typeof global !== 'undefined' && global.shouldStop && global.shouldStop()) {
            console.log('‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–±—Ä–∏–¥–∂–µ—Ä–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            return;
          }
          
          const [chain, tokens] = filteredChainEntries[i];
          const isLastChain = i === filteredChainEntries.length - 1;
          const nativeAmount = tokens.nativeToken ? tokens.nativeToken.amount.toFixed(6) : '0';
          const wrappedAmount = tokens.wrappedNativeToken ? tokens.wrappedNativeToken.amount.toFixed(6) : '0';
          const otherCount = tokens.otherTokens.length;
          
          console.log(`\nüîó ${chain.toUpperCase()}: ${nativeAmount} ${tokens.nativeToken?.symbol || 'ETH'}, ${wrappedAmount} wrapped, ${otherCount} —Ç–æ–∫–µ–Ω–æ–≤`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–µ—Ç–∏
          if (isNetworkExcluded(chain)) {
            console.log(`   üö´ –°–µ—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∞ –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
            continue;
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É Ethereum mainnet
          if (chain === 'eth' && !config.enableEthMainnet) {
            console.log(`   ‚õΩ Ethereum mainnet –æ—Ç–∫–ª—é—á—ë–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö`);
            continue;
          }
          
          
          // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ü–µ–ª–µ–≤–æ–π —Å–µ—Ç–∏ - —Ç–æ–ª—å–∫–æ —Å–≤–∞–ø—ã, –±–µ–∑ –±—Ä–∏–¥–∂–∏–Ω–≥–∞
          if (chain === walletTargetNetwork) {
            console.log(`   üìç –¶–µ–ª–µ–≤–∞—è —Å–µ—Ç—å - —Ç–æ–ª—å–∫–æ —Å–≤–∞–ø—ã –≤ –Ω–∞—Ç–∏–≤–Ω—ã–π`);
            const chainId = chainMapper.getChainId(chain);
            
            // –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ë—Ä–Ω—É—Ç—ã–µ –Ω–∞—Ç–∏–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã (–∞–Ω–≤—Ä–∞–ø)
            if (tokens.wrappedNativeToken && tokens.wrappedNativeToken.address) {
              console.log(`   üîì –ê–Ω–≤—Ä–∞–ø ${tokens.wrappedNativeToken.symbol}`);
              
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –Ω–∞—á–∞–ª–∞ unwrap –≤ UI
              if (global.broadcastLog) {
                global.broadcastLog({
                  type: 'token_operation',
                  operation: 'unwrap',
                  data: {
                    token: {
                      symbol: tokens.wrappedNativeToken.symbol,
                      amount: (Number(tokens.wrappedNativeToken.rawAmount) / Math.pow(10, tokens.wrappedNativeToken.decimals || 18)).toFixed(8),
                      logo_url: tokens.wrappedNativeToken.logo_url,
                      usd_value: tokens.wrappedNativeToken.usdValue.toFixed(2)
                    },
                    chain: chain.toUpperCase(),
                    target: '–Ω–∞—Ç–∏–≤–Ω—ã–π',
                    status: 'started'
                  }
                }, 'info');
              }
              
              try {
                const unwrapResult = await unwrapToken(
                  wallet,
                  chainId,
                  tokens.wrappedNativeToken.address,
                  tokens.wrappedNativeToken.rawAmount
                );
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ unwrap –≤ UI
                if (global.broadcastLog) {
                  global.broadcastLog({
                    type: 'token_operation',
                    operation: 'unwrap',
                    data: {
                      token: {
                        symbol: tokens.wrappedNativeToken.symbol,
                        amount: (Number(tokens.wrappedNativeToken.rawAmount) / Math.pow(10, tokens.wrappedNativeToken.decimals || 18)).toFixed(8),
                        logo_url: tokens.wrappedNativeToken.logo_url,
                        usd_value: tokens.wrappedNativeToken.usdValue.toFixed(2)
                      },
                      chain: chain.toUpperCase(),
                      target: '–Ω–∞—Ç–∏–≤–Ω—ã–π',
                      status: unwrapResult ? 'success' : 'error'
                    }
                  }, unwrapResult ? 'success' : 'error');
                }
              } catch (error) {
                console.log(`   ‚ùå –û—à–∏–±–∫–∞ unwrap ${tokens.wrappedNativeToken.symbol}: ${error.message}`);
                console.log(`   üìç –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏...`);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –æ—à–∏–±–∫–∏ unwrap –≤ UI
                if (global.broadcastLog) {
                  global.broadcastLog({
                    type: 'token_operation',
                    operation: 'unwrap',
                    data: {
                      token: {
                        symbol: tokens.wrappedNativeToken.symbol,
                        amount: (Number(tokens.wrappedNativeToken.rawAmount) / Math.pow(10, tokens.wrappedNativeToken.decimals || 18)).toFixed(8),
                        logo_url: tokens.wrappedNativeToken.logo_url,
                        usd_value: tokens.wrappedNativeToken.usdValue.toFixed(2)
                      },
                      chain: chain.toUpperCase(),
                      target: '–Ω–∞—Ç–∏–≤–Ω—ã–π',
                      status: 'error',
                      error: error.message
                    }
                  }, 'error');
                }
              }
            }
            
            // –ó–∞—Ç–µ–º —Å–≤–∞–ø–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ ETH
            for (const token of tokens.otherTokens) {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
              if (typeof global !== 'undefined' && global.shouldStop && global.shouldStop()) {
                console.log('‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–±—Ä–∏–¥–∂–µ—Ä–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                return;
              }
              
              // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–∫–µ–Ω—ã —Å –Ω—É–ª–µ–≤—ã–º –∏–ª–∏ –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–º –±–∞–ª–∞–Ω—Å–æ–º
              if (!token.amount || token.amount <= 0 || !token.rawAmount || token.rawAmount === '0') {
                continue;
              }
              
              try {
                const validTokens = tokens.otherTokens.filter(t => t.amount > 0 && t.rawAmount !== '0');
                const isNotLastToken = validTokens.indexOf(token) < validTokens.length - 1;
                await swapTokenToNative(wallet, chain, token, isNotLastToken);
              } catch (error) {
                console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–≤–∞–ø–∞ ${token.symbol}: ${error.message}`);
                console.log(`   üìç –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏...`);
              }
            }
            
            console.log(`   ‚úÖ ${chain.toUpperCase()} –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–∞–∫ —Ü–µ–ª–µ–≤–∞—è —Å–µ—Ç—å`);
            
            continue;
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Å–µ—Ç—å –¥–ª—è –±—Ä–∏–¥–∂–∞
          const chainId = chainMapper.getChainId(chain);
          if (!chainId) {
            console.log(`   ‚ùå –°–µ—Ç—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`);
            continue;
          }
          
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
          
          // –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ë—Ä–Ω—É—Ç—ã–µ –Ω–∞—Ç–∏–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã (–∞–Ω–≤—Ä–∞–ø)
          if (tokens.wrappedNativeToken && tokens.wrappedNativeToken.address) {
            console.log(`   üîì –ê–Ω–≤—Ä–∞–ø ${tokens.wrappedNativeToken.symbol}`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –Ω–∞—á–∞–ª–∞ unwrap –≤ UI
            if (global.broadcastLog) {
              global.broadcastLog({
                type: 'token_operation',
                operation: 'unwrap',
                data: {
                  token: {
                    symbol: tokens.wrappedNativeToken.symbol,
                    amount: (Number(tokens.wrappedNativeToken.rawAmount) / Math.pow(10, tokens.wrappedNativeToken.decimals || 18)).toFixed(8),
                    logo_url: tokens.wrappedNativeToken.logo_url,
                    usd_value: tokens.wrappedNativeToken.usdValue.toFixed(2)
                  },
                  chain: chain.toUpperCase(),
                  target: '–Ω–∞—Ç–∏–≤–Ω—ã–π',
                  status: 'started'
                }
              }, 'info');
            }
            
            try {
              const unwrapResult = await unwrapToken(
                wallet,
                chainId,
                tokens.wrappedNativeToken.address,
                tokens.wrappedNativeToken.rawAmount
              );
              
              // Unwrap –∑–∞–≤–µ—Ä—à–µ–Ω
              
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ unwrap –≤ UI
              if (global.broadcastLog) {
                global.broadcastLog({
                  type: 'token_operation',
                  operation: 'unwrap',
                  data: {
                    token: {
                      symbol: tokens.wrappedNativeToken.symbol,
                      amount: (Number(tokens.wrappedNativeToken.rawAmount) / Math.pow(10, tokens.wrappedNativeToken.decimals || 18)).toFixed(8),
                      logo_url: tokens.wrappedNativeToken.logo_url,
                      usd_value: tokens.wrappedNativeToken.usdValue.toFixed(2)
                    },
                    chain: chain.toUpperCase(),
                    target: '–Ω–∞—Ç–∏–≤–Ω—ã–π',
                    status: unwrapResult ? 'success' : 'error'
                  }
                }, unwrapResult ? 'success' : 'error');
              }
            } catch (error) {
              console.log(`   ‚ùå –û—à–∏–±–∫–∞ unwrap ${tokens.wrappedNativeToken.symbol}: ${error.message}`);
              console.log(`   üìç –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏...`);
              
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –æ—à–∏–±–∫–∏ unwrap –≤ UI
              if (global.broadcastLog) {
                global.broadcastLog({
                  type: 'token_operation',
                  operation: 'unwrap',
                  data: {
                    token: {
                      symbol: tokens.wrappedNativeToken.symbol,
                      amount: (Number(tokens.wrappedNativeToken.rawAmount) / Math.pow(10, tokens.wrappedNativeToken.decimals || 18)).toFixed(8),
                      logo_url: tokens.wrappedNativeToken.logo_url,
                      usd_value: tokens.wrappedNativeToken.usdValue.toFixed(2)
                    },
                    chain: chain.toUpperCase(),
                    target: '–Ω–∞—Ç–∏–≤–Ω—ã–π',
                    status: 'error',
                    error: error.message
                  }
                }, 'error');
              }
            }
          }
          
          // –ó–∞—Ç–µ–º —Å–≤–∞–ø–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ –Ω–∞—Ç–∏–≤–Ω—ã–π
          let swapsCompleted = 0;
          for (const token of tokens.otherTokens) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            if (typeof global !== 'undefined' && global.shouldStop && global.shouldStop()) {
              console.log('‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–±—Ä–∏–¥–∂–µ—Ä–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
              return;
            }
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–∫–µ–Ω—ã —Å –Ω—É–ª–µ–≤—ã–º –∏–ª–∏ –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–º –±–∞–ª–∞–Ω—Å–æ–º
            if (!token.amount || token.amount <= 0 || !token.rawAmount || token.rawAmount === '0') {
              continue;
            }
            
            try {
              const swapResult = await swapTokenToNative(wallet, chain, token, tokens.otherTokens.indexOf(token) < tokens.otherTokens.length - 1);
              if (swapResult) {
                swapsCompleted++;
              }
            } catch (error) {
              console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–≤–∞–ø–∞ ${token.symbol}: ${error.message}`);
              console.log(`   üìç –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏...`);
            }
          }
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –±—Ä–∏–¥–∂–∏—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
          let bridgeCompleted = false;
          
          if (tokens.nativeToken) {
            switch (collectionMode) {
              case 'collect_to_target':
                // –ë—Ä–∏–¥–∂–∏–º –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é —Ü–µ–ª–µ–≤—É—é —Å–µ—Ç—å
                const bridgeTargetNetwork = walletTargetNetwork;
                if (chain !== bridgeTargetNetwork) {
                  console.log(`   üåâ –ë—Ä–∏–¥–∂ –≤ ${bridgeTargetNetwork.toUpperCase()}`);
                  try {
                    bridgeCompleted = await bridgeToTargetNetwork(wallet, chain, tokens.nativeToken, bridgeTargetNetwork, true);
                    // Bridge –∑–∞–≤–µ—Ä—à–µ–Ω
                  } catch (error) {
                    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –±—Ä–∏–¥–∂–∏–Ω–≥–∞: ${error.message}`);
                    console.log(`   üìç –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ç—è–º–∏...`);
                    bridgeCompleted = false;
                  }
                } else {
                  console.log(`   üìç –¶–µ–ª–µ–≤–∞—è —Å–µ—Ç—å - –±—Ä–∏–¥–∂ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è`);
                }
                break;
                
              case 'swap_to_native':
                // –¢–æ–ª—å–∫–æ —Å–≤–∞–ø—ã –≤ –Ω–∞—Ç–∏–≤–∫—É, –±–µ–∑ –±—Ä–∏–¥–∂–∏–Ω–≥–∞
                console.log(`   üí∞ –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ –Ω–∞—Ç–∏–≤–∫–µ`);
                bridgeCompleted = false;
                break;
            }
          }
          
          // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–µ—Ç—è–º–∏ —É–±—Ä–∞–Ω–∞ - –∑–∞–¥–µ—Ä–∂–∫–∏ —Ç–æ–ª—å–∫–æ –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ –∏ –∫–æ—à–µ–ª—å–∫–∞–º–∏
        }
        
        console.log(`\n‚úÖ –ö–æ—à–µ–ª–µ–∫ ${wallet.address} –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n`);
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ—à–µ–ª—å–∫–∞: ${error.message}`);
        console.error('üìç –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –∫–æ—à–µ–ª—å–∫–∞–º–∏...\n');
      }
    }
    
    console.log('üéâ –ê–≤—Ç–æ–±—Ä–∏–¥–∂–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω');
    
  } catch (error) {
    console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
  }
}



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π –∏–∑ —Ñ–∞–π–ª–∞
function readPrivateKeys(filePath) {
  try {
    // –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π, –¥–µ–ª–∞–µ–º –µ–≥–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
    const fullPath = path.isAbsolute(filePath) ? filePath : path.join(__dirname, '..', filePath);
    const content = fs.readFileSync(fullPath, 'utf8');
    return content
      .split('\n')
      .map(line => line.trim())
      .filter(line => line && !line.startsWith('#')) // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
      .map(key => key.startsWith('0x') ? key : `0x${key}`); // –î–æ–±–∞–≤–ª—è–µ–º 0x –µ—Å–ª–∏ –Ω–µ—Ç
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–ª—é—á–µ–π: ${error.message}`);
    return [];
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = {
  main,
  processTokensData,
  swapTokenToNative,
  bridgeToTargetNetwork,
  getRpcUrl,
  transactionDelay,
  createProviderWithFallback
}; 