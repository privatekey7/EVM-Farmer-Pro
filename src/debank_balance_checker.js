const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');
const ethers = require('ethers');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π –∏–∑ —Ñ–∞–π–ª–∞
function readPrivateKeys(filePath) {
  try {
    // –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π, –¥–µ–ª–∞–µ–º –µ–≥–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
    const fullPath = path.isAbsolute(filePath) ? filePath : path.join(__dirname, '..', filePath);
    const content = fs.readFileSync(fullPath, 'utf8');
    return content
      .split('\n')
      .map(line => line.trim())
      .filter(line => line && !line.startsWith('#')) // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
      .map(key => key.startsWith('0x') ? key : `0x${key}`); // –î–æ–±–∞–≤–ª—è–µ–º 0x –µ—Å–ª–∏ –Ω–µ—Ç
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–ª—é—á–µ–π: ${error.message}`);
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
function getAddressFromPrivateKey(privateKey) {
  try {
    const wallet = new ethers.Wallet(privateKey);
    return wallet.address;
  } catch (error) {
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –≤ EVM —Å–µ—Ç—è—Ö
async function checkBalance(address, browser) {
  const url = `https://debank.com/profile/${address}`;
  const balanceListResponses = [];
  
  console.log(`   üìä ${address}`);

  const page = await browser.newPage();
  
  // –ü–µ—Ä–µ—Ö–≤–∞—Ç –æ—Ç–≤–µ—Ç–æ–≤
  page.on('response', async (response) => {
    const reqUrl = response.url();
    if (reqUrl.includes('balance_list')) {
      try {
        const json = await response.json();
        balanceListResponses.push({
          url: reqUrl,
          data: json
        });
      } catch (e) {
        // ignore non-json
      }
    }
  });

  await page.goto(url, { waitUntil: 'networkidle2' });

  // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ "Data updated"
  try {
    await page.waitForFunction(
      () => !!Array.from(document.querySelectorAll('body *')).find(el => el.textContent.includes('Data updated')),
      { timeout: 30000 }
    );
    console.log(`   ‚úÖ –ë–∞–ª–∞–Ω—Å—ã –ø–æ–ª—É—á–µ–Ω—ã`);
  } catch (error) {
    console.log(`   ‚ö†Ô∏è  –ß–∞—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–∞–π–º–∞—É—Ç)`);
  }

  // –ñ–¥–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã —É—Å–ø–µ–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
  await new Promise(resolve => setTimeout(resolve, 5000));

  await page.close();
  return balanceListResponses;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üîç –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∞–ø–µ—Ä–∞ –±–∞–ª–∞–Ω—Å–æ–≤\n');
  
  // –ß–∏—Ç–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –∏–∑ —Ñ–∞–π–ª–∞
  const privateKeys = readPrivateKeys('keys.txt');
  
  if (privateKeys.length === 0) {
    console.error('‚ùå –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ keys.txt');
    return [];
  }
  
  console.log(`üíº –ù–∞–π–¥–µ–Ω–æ ${privateKeys.length} –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n`);
  
  const walletsData = [];
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  const browser = await puppeteer.launch({ 
    headless: true, 
    args: ['--no-sandbox', '--disable-setuid-sandbox'] 
  });
  
  try {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–ª—é—á –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    for (let i = 0; i < privateKeys.length; i++) {
      const privateKey = privateKeys[i];
      const address = getAddressFromPrivateKey(privateKey);
      
      if (!address) {
        console.log(`   ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á\n`);
        continue;
      }
      
      console.log(`üîç –ö–æ—à–µ–ª–µ–∫ ${i + 1}/${privateKeys.length}:`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      const balanceData = await checkBalance(address, browser);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞ –≤ –º–∞—Å—Å–∏–≤
      walletsData.push({
        address: address,
        privateKey: privateKey,
        balances: balanceData
      });
      
      console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
      
      // –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –º–µ–∂–¥—É –∫–æ—à–µ–ª—å–∫–∞–º–∏
      if (i < privateKeys.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 3000));
      }
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  } finally {
    await browser.close();
  }
  
  return walletsData;
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
module.exports = { main, readPrivateKeys, getAddressFromPrivateKey, checkBalance };

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
main().catch(error => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
});
}
