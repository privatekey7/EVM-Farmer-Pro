const fs = require('fs');
const path = require('path');
const ethers = require('ethers');
const axios = require('axios');

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø—Ä–æ–º–∏—Å–æ–≤
process.on('unhandledRejection', (reason, promise) => {
  console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏/RPC - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
});

process.on('uncaughtException', (error) => {
  console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ–º–∏—Å—Å–µ - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞');
  process.exit(1);
});

// –ò–º–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç
const { RelayBridge } = require('../utils/relay');
const chainMapper = require('../utils/chainMapper');
const rpcConfig = require('../utils/RPC.json');
const fallbackRpcConfig = require('../utils/fallbackRPC.json');
const { transactionDelay } = require('../utils/delay');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç–µ–π–±–ª–∫–æ–π–Ω–æ–≤
const STABLECOIN_CONFIG = {
  optimism: {
    usdt: '0x94b008aa00579c1307b0ef2c499ad98a8ce58e58',
    usdc: '0x0b2c639c533813f4aa9d7837caf62653d097ff85'
  },
  arbitrum: {
    usdt: '0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9',
    usdc: '0xaf88d065e77c8cc2239327c5edb3a432268e5831'
  },
  base: {
    usdc: '0x833589fcd6edb6e08f4c7c32d4f71b54bda02913'
  }
};

// –õ–æ–≥–æ—Ç–∏–ø—ã —Ç–æ–∫–µ–Ω–æ–≤
const TOKEN_LOGOS = {
  ETH: 'https://coin-images.coingecko.com/coins/images/279/large/ethereum.png',
  USDT: 'https://coin-images.coingecko.com/coins/images/39963/large/usdt.png',
  USDC: 'https://coin-images.coingecko.com/coins/images/6319/large/usdc.png'
};

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Relay Bridge
const relayBridge = new RelayBridge();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ StableFix
function getStableFixConfig() {
  if (typeof global !== 'undefined' && global.stableFixConfig) {
    return global.stableFixConfig;
  }
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  return {
    enabled: false,
    percentage: 50,
    targetStablecoin: 'random',
    networks: ['optimism', 'arbitrum', 'base'],
    excludedNetworks: []
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è RPC URL
function getRpcUrl(chainId) {
  const config = rpcConfig.rpc.find(item => item.chainId === chainId);
  return config ? config.httpRpcUrl : null;
}

// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ RPC URL –¥–ª—è —Å–µ—Ç–∏ (–æ—Å–Ω–æ–≤–Ω–æ–π + fallback)
function getAllRpcUrls(chainId) {
  const urls = [];
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π RPC
  const mainConfig = rpcConfig.rpc.find(item => item.chainId === chainId);
  if (mainConfig) {
    urls.push(mainConfig.httpRpcUrl);
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º fallback RPC
  const fallbackConfig = fallbackRpcConfig.fallbackRPC.find(item => item.chainId === chainId);
  if (fallbackConfig && fallbackConfig.fallbackUrls) {
    urls.push(...fallbackConfig.fallbackUrls);
  }
  
  return urls;
}

// –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–µ—Ç–∏
function getChainName(chainId) {
  const config = rpcConfig.rpc.find(item => item.chainId === chainId);
  return config ? config.name.toUpperCase() : `Chain ${chainId}`;
}

// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å fallback –ª–æ–≥–∏–∫–æ–π
async function createProviderWithFallback(chainId) {
  const urls = getAllRpcUrls(chainId);
  const chainName = getChainName(chainId);
  
  if (urls.length === 0) {
    console.log(`   ‚ùå RPC URL –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ${chainName}`);
    return null;
  }
  
  console.log(`   üîç –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${chainName} (${urls.length} RPC –¥–æ—Å—Ç—É–ø–Ω–æ)`);
  
  // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π RPC (–ø–µ—Ä–≤—ã–π –≤ —Å–ø–∏—Å–∫–µ)
  const mainRpcUrl = urls[0];
  const fallbackUrls = urls.slice(1);
  
  // 3 –ø–æ–ø—ã—Ç–∫–∏ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É RPC
  console.log(`\n –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ RPC: ${mainRpcUrl}`);
  for (let attempt = 1; attempt <= 3; attempt++) {
    try {
      console.log(`   üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/3 –æ—Å–Ω–æ–≤–Ω–æ–≥–æ RPC`);
      
      const provider = new ethers.JsonRpcProvider(mainRpcUrl, undefined, {
        staticNetwork: true, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é —Å–µ—Ç—å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
        timeout: 10000 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 10 —Å–µ–∫—É–Ω–¥
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      const networkPromise = provider.getNetwork();
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('Timeout')), 10000)
      );
      
      await Promise.race([networkPromise, timeoutPromise]);
      
      console.log(`   ‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π RPC —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${chainName} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
      return provider;
      
    } catch (error) {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      let errorType = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è';
      if (error.code === 'SERVER_ERROR' || error.message.includes('Bad Request')) {
        errorType = '—Å–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞';
      } else if (error.code === 'TIMEOUT' || error.message.includes('Timeout')) {
        errorType = '—Ç–∞–π–º–∞—É—Ç';
      } else if (error.code === 'NETWORK_ERROR' || error.message.includes('network')) {
        errorType = '—Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞';
      } else if (error.message.includes('jsonrpc')) {
        errorType = '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON-RPC';
      }
      
      console.log(`   ‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/3 –æ—Å–Ω–æ–≤–Ω–æ–≥–æ RPC –Ω–µ—É–¥–∞—á–Ω–∞ (${errorType}): ${error.message}`);
      
      if (attempt < 3) {
        console.log(`   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    }
  }
  
  // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π RPC –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º fallback RPC
  if (fallbackUrls.length > 0) {
    console.log(`\nüîÑ –û—Å–Ω–æ–≤–Ω–æ–π RPC –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ fallback RPC (${fallbackUrls.length} –¥–æ—Å—Ç—É–ø–Ω–æ)`);
    
    for (let i = 0; i < fallbackUrls.length; i++) {
      const fallbackUrl = fallbackUrls[i];
      
      try {
        console.log(`   üì° –ü–æ–ø—ã—Ç–∫–∞ ${i + 1}/${fallbackUrls.length}: fallback RPC`);
        
        const provider = new ethers.JsonRpcProvider(fallbackUrl, undefined, {
          staticNetwork: true, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é —Å–µ—Ç—å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
          timeout: 10000 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 10 —Å–µ–∫—É–Ω–¥
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        const networkPromise = provider.getNetwork();
        const timeoutPromise = new Promise((_, reject) => 
          setTimeout(() => reject(new Error('Timeout')), 10000)
        );
        
        await Promise.race([networkPromise, timeoutPromise]);
        
        console.log(`   ‚úÖ Fallback RPC —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${chainName} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
        return provider;
        
      } catch (error) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        let errorType = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è';
        if (error.code === 'SERVER_ERROR' || error.message.includes('Bad Request')) {
          errorType = '—Å–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞';
        } else if (error.code === 'TIMEOUT' || error.message.includes('Timeout')) {
          errorType = '—Ç–∞–π–º–∞—É—Ç';
        } else if (error.code === 'NETWORK_ERROR' || error.message.includes('network')) {
          errorType = '—Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞';
        } else if (error.message.includes('jsonrpc')) {
          errorType = '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON-RPC';
        }
        
        console.log(`   ‚ùå Fallback RPC ${i + 1}/${fallbackUrls.length} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (${errorType}): ${error.message}`);
        
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π fallback RPC, –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–ø—É—Å–∫ —Å–µ—Ç–∏
        if (i === fallbackUrls.length - 1) {
          console.log(`   ‚ö†Ô∏è  –í—Å–µ RPC –¥–ª—è ${chainName} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ—Ç—å`);
          return null;
        }
      }
    }
  } else {
    console.log(`   ‚ö†Ô∏è  Fallback RPC –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è ${chainName}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ—Ç—å`);
    return null;
  }
  
  return null;
}

// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ Relay API
function handleRelayError(error, tokenSymbol, operationType = '–æ–ø–µ—Ä–∞—Ü–∏–∏', chainName = '') {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
  if (error.code === 'ECONNRESET' || error.code === 'ENOTFOUND' || error.code === 'ETIMEDOUT') {
    console.log(`   ‚ö†Ô∏è  –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ ${operationType} ${tokenSymbol}: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ UI
    if (global.broadcastLog) {
      global.broadcastLog({
        type: 'token_operation',
        operation: operationType.includes('—Å–≤–∞–ø') ? 'swap' : 'bridge',
        data: {
          token: {
            symbol: tokenSymbol,
            logo_url: null
          },
          chain: chainName.toUpperCase(),
          target: operationType.includes('–±—Ä–∏–¥–∂') ? 'Base' : '–Ω–∞—Ç–∏–≤–Ω—ã–π',
          status: 'skipped',
          reason: '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞'
        }
      }, 'warning');
    }
    return;
  }
  
  if (error.response && error.response.data) {
    const errorCode = error.response.data.errorCode;
    const errorMessage = error.response.data.message || '';
    
    // –ö–∞—Ä—Ç–∞ –æ—à–∏–±–æ–∫ Relay API —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    const errorMap = {
      // Expected Errors (–æ–∂–∏–¥–∞–µ–º—ã–µ –æ—à–∏–±–∫–∏)
      'AMOUNT_TOO_LOW': `–°—É–º–º–∞ ${tokenSymbol} —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ –¥–ª—è ${operationType}`,
      'CHAIN_DISABLED': `–°–µ—Ç—å ${chainName} –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞`,
      'EXTRA_TXS_NOT_SUPPORTED': `–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è`,
      'FORBIDDEN': `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏`,
      'INSUFFICIENT_FUNDS': `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${tokenSymbol} –Ω–∞ –±–∞–ª–∞–Ω—Å–µ`,
      'INSUFFICIENT_LIQUIDITY': `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –¥–ª—è ${operationType} ${tokenSymbol}`,
      'INVALID_ADDRESS': `–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞`,
      'INVALID_EXTRA_TXS': `–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏`,
      'INVALID_GAS_LIMIT_FOR_DEPOSIT_SPECIFIED_TXS': `–ù–µ–≤–µ—Ä–Ω—ã–π –ª–∏–º–∏—Ç –≥–∞–∑–∞ –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`,
      'INVALID_INPUT_CURRENCY': `–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –≤—Ö–æ–¥–Ω–æ–π —Ç–æ–∫–µ–Ω ${tokenSymbol}`,
      'INVALID_OUTPUT_CURRENCY': `–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –≤—ã—Ö–æ–¥–Ω–æ–π —Ç–æ–∫–µ–Ω`,
      'INVALID_SLIPPAGE_TOLERANCE': `–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è`,
      'NO_INTERNAL_SWAP_ROUTES_FOUND': `–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã ${operationType} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`,
      'NO_QUOTES': `–ö–æ—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è ${operationType} ${tokenSymbol} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã`,
      'NO_SWAP_ROUTES_FOUND': `–ú–∞—Ä—à—Ä—É—Ç—ã ${operationType} –¥–ª—è ${tokenSymbol} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`,
      'ROUTE_TEMPORARILY_RESTRICTED': `–ú–∞—Ä—à—Ä—É—Ç ${operationType} –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω`,
      'SANCTIONED_CURRENCY': `–¢–æ–∫–µ–Ω ${tokenSymbol} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–∞–Ω–∫—Ü–∏–æ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ`,
      'SANCTIONED_WALLET_ADDRESS': `–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`,
      'SWAP_IMPACT_TOO_HIGH': `–°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ü–µ–Ω—É ${tokenSymbol}`,
      'UNAUTHORIZED': `–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏`,
      'UNSUPPORTED_CHAIN': `${operationType.charAt(0).toUpperCase() + operationType.slice(1)} –≤ —Å–µ—Ç–∏ ${chainName} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`,
      'UNSUPPORTED_CURRENCY': `–¢–æ–∫–µ–Ω ${tokenSymbol} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è ${operationType}`,
      'UNSUPPORTED_EXECUTION_TYPE': `–¢–∏–ø –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`,
      'UNSUPPORTED_ROUTE': `–ú–∞—Ä—à—Ä—É—Ç ${operationType} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`,
      'USER_RECIPIENT_MISMATCH': `–ê–¥—Ä–µ—Å–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å`,
      
      // Unexpected Errors (–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏)
      'DESTINATION_TX_FAILED': `–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ —Ü–µ–ª–µ–≤–æ–π —Å–µ—Ç–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å`,
      'ERC20_ROUTER_ADDRESS_NOT_FOUND': `–ê–¥—Ä–µ—Å —Ä–æ—É—Ç–µ—Ä–∞ —Ç–æ–∫–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω`,
      'UNKNOWN_ERROR': `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ ${operationType} ${tokenSymbol}`,
      'SWAP_QUOTE_FAILED': `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è ${operationType} ${tokenSymbol}`,
      'PERMIT_FAILED': `–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞`,
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
      'NO_BRIDGE_ROUTES_FOUND': `–ú–∞—Ä—à—Ä—É—Ç –±—Ä–∏–¥–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ${tokenSymbol}`,
      'CHAIN_NOT_SUPPORTED': `${operationType.charAt(0).toUpperCase() + operationType.slice(1)} –∏–∑ ${chainName} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`,
      'INSUFFICIENT_BALANCE': `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${tokenSymbol} –¥–ª—è ${operationType}`
    };
    
    // –ò—â–µ–º –æ—à–∏–±–∫—É –ø–æ –∫–æ–¥—É
    if (errorCode && errorMap[errorCode]) {
      console.log(`   ‚ö†Ô∏è  ${errorMap[errorCode]}`);
      return;
    }
    
    // –ò—â–µ–º –æ—à–∏–±–∫—É –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    const lowerMessage = errorMessage.toLowerCase();
    if (lowerMessage.includes('too low') || lowerMessage.includes('minimum')) {
      console.log(`   ‚ö†Ô∏è  ${errorMap['AMOUNT_TOO_LOW']}`);
    } else if (lowerMessage.includes('insufficient')) {
      console.log(`   ‚ö†Ô∏è  ${errorMap['INSUFFICIENT_BALANCE']}`);
    } else if (lowerMessage.includes('no route') || lowerMessage.includes('routes not found')) {
      if (operationType.includes('–±—Ä–∏–¥–∂')) {
        console.log(`   ‚ö†Ô∏è  ${errorMap['NO_BRIDGE_ROUTES_FOUND']}`);
      } else {
        console.log(`   ‚ö†Ô∏è  ${errorMap['NO_SWAP_ROUTES_FOUND']}`);
      }
    } else if (lowerMessage.includes('unsupported') || lowerMessage.includes('not supported')) {
      console.log(`   ‚ö†Ô∏è  ${errorMap['UNSUPPORTED_CURRENCY']}`);
    } else {
      // –ï—Å–ª–∏ –∫–æ–¥ –æ—à–∏–±–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –≤—ã–≤–æ–¥–∏–º –µ–≥–æ
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ ${operationType}: ${errorCode || errorMessage}`);
    }
  } else {
    // –î–ª—è –æ—à–∏–±–æ–∫ –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ ${operationType}: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π
function readPrivateKeys(filePath) {
  try {
    const fullPath = path.isAbsolute(filePath) ? filePath : path.join(__dirname, '..', filePath);
    const content = fs.readFileSync(fullPath, 'utf8');
    return content
      .split('\n')
      .map(line => line.trim())
      .filter(line => line && !line.startsWith('#'))
      .map(key => key.startsWith('0x') ? key : `0x${key}`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–ª—é—á–µ–π: ${error.message}`);
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
function getAddressFromPrivateKey(privateKey) {
  try {
    const wallet = new ethers.Wallet(privateKey);
    return wallet.address;
  } catch (error) {
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–≤–∞–ø–∞ ETH –≤ —Å—Ç–µ–π–±–ª–∫–æ–π–Ω
async function swapEthToStablecoin(wallet, network, stablecoinType, ethAmount, shouldDelayAfter = false) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
  if (typeof global !== 'undefined' && global.shouldStopStableFix && global.shouldStopStableFix()) {
    console.log('‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ StableFix –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return false;
  }

  // –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π —Å–µ—Ç–µ–π –∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º DeBank
  const networkMapping = {
    'optimism': 'op',
    'arbitrum': 'arb',
    'base': 'base'
  };
  
  const debankId = networkMapping[network] || network;
  const chainId = chainMapper.getChainId(debankId);
  
  if (!chainId) {
    console.log(`   ‚ùå –°–µ—Ç—å ${network} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è (debankId: ${debankId})`);
    return false;
  }

  const provider = await createProviderWithFallback(chainId);
  if (!provider) {
    console.log(`   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–≤–∞–ø ETH ‚Üí ${stablecoinType.toUpperCase()} - RPC –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è ${getChainName(chainId)}`);
    return false;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ç–µ–π–±–ª–∫–æ–π–Ω–∞ –≤ —Å–µ—Ç–∏
  if (!STABLECOIN_CONFIG[network] || !STABLECOIN_CONFIG[network][stablecoinType]) {
    console.log(`   ‚ùå –°—Ç–µ–π–±–ª–∫–æ–π–Ω ${stablecoinType.toUpperCase()} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–µ—Ç–∏ ${network}`);
    return false;
  }

  const stablecoinAddress = STABLECOIN_CONFIG[network][stablecoinType];
  const stablecoinSymbol = stablecoinType.toUpperCase();

  try {
    const signer = new ethers.Wallet(wallet.privateKey, provider);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å ETH
    const currentBalance = await provider.getBalance(wallet.address);
    if (currentBalance < ethAmount) {
      console.log(`   ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ETH –¥–ª—è —Å–≤–∞–ø–∞`);
      return false;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const ethAmountFormatted = (Number(ethAmount) / Math.pow(10, 18)).toFixed(6);
    console.log(`   üí± –°–≤–∞–ø ${ethAmountFormatted} ETH ‚Üí ${stablecoinSymbol} –≤ ${network.toUpperCase()}`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –Ω–∞—á–∞–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ UI
    if (global.broadcastLog) {
      global.broadcastLog({
        type: 'token_operation',
        operation: 'swap',
        data: {
          token: {
            symbol: 'ETH',
            amount: ethAmountFormatted,
            logo_url: TOKEN_LOGOS.ETH
          },
          chain: network.toUpperCase(),
          target: stablecoinSymbol,
          status: 'started'
        }
      }, 'info');
    }

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–≤–∞–ø–∞ —á–µ—Ä–µ–∑ Relay
    const quoteParams = {
      user: wallet.address,
      recipient: wallet.address,
      originChainId: chainId,
      destinationChainId: chainId, // –°–≤–∞–ø –≤–Ω—É—Ç—Ä–∏ —Ç–æ–π –∂–µ —Å–µ—Ç–∏
      originCurrency: '0x0000000000000000000000000000000000000000', // ETH
      destinationCurrency: stablecoinAddress, // –°—Ç–µ–π–±–ª–∫–æ–π–Ω
      amount: ethAmount.toString(),
      tradeType: 'EXACT_INPUT'
    };

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ç–∏—Ä–æ–≤–∫—É
    let quote;
    let retryCount = 0;
    const maxRetries = 3;

    while (retryCount < maxRetries) {
      try {
        quote = await relayBridge.getQuote(quoteParams);
        break;
      } catch (error) {
        retryCount++;
        
        if ((error.code === 'ECONNRESET' || error.code === 'ENOTFOUND' || error.code === 'ETIMEDOUT') && retryCount < maxRetries) {
          console.log(`   üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${retryCount}/${maxRetries}...`);
          await new Promise(resolve => setTimeout(resolve, 2000 * retryCount));
          continue;
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ Relay
        handleRelayError(error, 'ETH', '—Å–≤–∞–ø–∞', network);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –æ—à–∏–±–∫–∏ –≤ UI
        if (global.broadcastLog) {
          global.broadcastLog({
            type: 'token_operation',
            operation: 'swap',
            data: {
              token: {
                symbol: 'ETH',
                amount: ethAmountFormatted,
                logo_url: TOKEN_LOGOS.ETH
              },
              chain: network.toUpperCase(),
              target: stablecoinSymbol,
              status: 'failed',
              reason: '–û—à–∏–±–∫–∞ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏'
            }
          }, 'error');
        }
        
        return false;
      }
    }

    if (!quote.steps || quote.steps.length === 0) {
      console.log(`   ‚ö†Ô∏è –°–≤–∞–ø –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ UI
      if (global.broadcastLog) {
        global.broadcastLog({
          type: 'token_operation',
          operation: 'swap',
          data: {
            token: {
              symbol: 'ETH',
              amount: ethAmountFormatted,
              logo_url: TOKEN_LOGOS.ETH
            },
            chain: network.toUpperCase(),
            target: stablecoinSymbol,
            status: 'skipped',
            reason: '–°–≤–∞–ø –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
          }
        }, 'warning');
      }
      
      return false;
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–≤–∞–ø
    let result;
    let executeRetryCount = 0;
    const maxExecuteRetries = 2;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ quote.steps —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
    if (!quote.steps || !Array.isArray(quote.steps)) {
      return false;
    }

    while (executeRetryCount < maxExecuteRetries) {
      try {
        result = await relayBridge.executeSteps(quote.steps, provider, signer);
        break;
      } catch (error) {
        executeRetryCount++;
        
        if ((error.code === 'ECONNRESET' || error.code === 'ENOTFOUND' || error.code === 'ETIMEDOUT') && executeRetryCount < maxExecuteRetries) {
          console.log(`   üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ${executeRetryCount}/${maxExecuteRetries}...`);
          await new Promise(resolve => setTimeout(resolve, 3000 * executeRetryCount));
          continue;
        }
        
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–≤–∞–ø–∞: ${error.message}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –æ—à–∏–±–∫–∏ –≤ UI
        if (global.broadcastLog) {
          global.broadcastLog({
            type: 'token_operation',
            operation: 'swap',
            data: {
              token: {
                symbol: 'ETH',
                amount: ethAmountFormatted,
                logo_url: TOKEN_LOGOS.ETH
              },
              chain: network.toUpperCase(),
              target: stablecoinSymbol,
              status: 'failed',
              reason: '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
            }
          }, 'error');
        }
        
        return false;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (result && Array.isArray(result)) {
      const failedSteps = result.filter(step => step.status === 'failed');
      if (failedSteps.length === 0) {
        console.log(`   ‚úÖ –°–≤–∞–ø ETH ‚Üí ${stablecoinSymbol} –∑–∞–≤–µ—Ä—à–µ–Ω`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ —É—Å–ø–µ—Ö–∞ –≤ UI
        if (global.broadcastLog) {
          global.broadcastLog({
            type: 'token_operation',
            operation: 'swap',
            data: {
              token: {
                symbol: 'ETH',
                amount: ethAmountFormatted,
                logo_url: TOKEN_LOGOS.ETH
              },
              chain: network.toUpperCase(),
              target: stablecoinSymbol,
              status: 'success'
            }
          }, 'success');
        }
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
        if (shouldDelayAfter) {
          await transactionDelay();
        }
        
        return true;
      } else {
        console.log(`   ‚ùå –°–≤–∞–ø –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –æ—à–∏–±–∫–∏ –≤ UI
        if (global.broadcastLog) {
          global.broadcastLog({
            type: 'token_operation',
            operation: 'swap',
            data: {
              token: {
                symbol: 'ETH',
                amount: ethAmountFormatted,
                logo_url: TOKEN_LOGOS.ETH
              },
              chain: network.toUpperCase(),
              target: stablecoinSymbol,
              status: 'failed',
              reason: '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
            }
          }, 'error');
        }
        
        return false;
      }
    }

    return false;
  } catch (error) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ —Å retry –ª–æ–≥–∏–∫–æ–π
    if (error.code === 'ECONNRESET' || error.code === 'ENOTFOUND' || error.code === 'ETIMEDOUT') {
      console.log(`   ‚ö†Ô∏è  –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤–∞–ø–µ ETH ‚Üí ${stablecoinSymbol}: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ`);
      
      // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞ –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
      try {
        console.log(`   üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–≤–∞–ø–∞ ETH ‚Üí ${stablecoinSymbol}...`);
        await new Promise(resolve => setTimeout(resolve, 2000)); // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
        
        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
        const retryQuote = await relayBridge.getQuote(quoteParams);
        
        if (retryQuote && retryQuote.steps && retryQuote.steps.length > 0) {
          console.log(`   ‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–≤–∞–ø...`);
          
          // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–≤–∞–ø —Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∫–æ—Ç–∏—Ä–æ–≤–∫–æ–π
          const retryResult = await relayBridge.executeSteps(retryQuote.steps, provider, signer);
          
          if (retryResult && Array.isArray(retryResult)) {
            const failedSteps = retryResult.filter(step => step.status === 'failed');
            if (failedSteps.length === 0) {
              console.log(`   ‚úÖ –°–≤–∞–ø ETH ‚Üí ${stablecoinSymbol} –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–∞`);
              
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ —É—Å–ø–µ—Ö–∞ –≤ UI
              if (global.broadcastLog) {
                global.broadcastLog({
                  type: 'token_operation',
                  operation: 'swap',
                  data: {
                    token: {
                      symbol: 'ETH',
                      amount: ethAmountFormatted,
                      logo_url: TOKEN_LOGOS.ETH
                    },
                    chain: network.toUpperCase(),
                    target: stablecoinSymbol,
                    status: 'success'
                  }
                }, 'success');
              }
              
              // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
              if (shouldDelayAfter) {
                await transactionDelay();
              }
              
              return true;
            }
          }
        }
      } catch (retryError) {
        console.log(`   ‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: ${retryError.message}`);
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ UI –æ –Ω–µ—É–¥–∞—á–µ
      if (global.broadcastLog) {
        global.broadcastLog({
          type: 'token_operation',
          operation: 'swap',
          data: {
            token: {
              symbol: 'ETH',
              amount: ethAmountFormatted,
              logo_url: TOKEN_LOGOS.ETH
            },
            chain: network.toUpperCase(),
            target: stablecoinSymbol,
            status: 'skipped',
            reason: '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞'
          }
        }, 'warning');
      }
      
      return false;
    }
    
    // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–≤–∞–ø–∞ ETH ‚Üí ${stablecoinSymbol}: ${error.message}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –æ—à–∏–±–∫–∏ –≤ UI
    if (global.broadcastLog) {
      global.broadcastLog({
        type: 'token_operation',
        operation: 'swap',
        data: {
          token: {
            symbol: 'ETH',
            amount: (Number(ethAmount) / Math.pow(10, 18)).toFixed(6),
            logo_url: TOKEN_LOGOS.ETH
          },
          chain: network.toUpperCase(),
          target: stablecoinSymbol,
          status: 'failed',
          reason: error.message
        }
      }, 'error');
    }
    
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ ETH –≤ —Å–µ—Ç–∏
async function getEthBalance(address, network) {
  // –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π —Å–µ—Ç–µ–π –∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º DeBank
  const networkMapping = {
    'optimism': 'op',
    'arbitrum': 'arb',
    'base': 'base'
  };
  
  const debankId = networkMapping[network] || network;
  const chainId = chainMapper.getChainId(debankId);
  
  if (!chainId) {
    console.log(`   ‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å–µ—Ç—å: ${network} (debankId: ${debankId})`);
    return 0n;
  }

  const provider = await createProviderWithFallback(chainId);
  if (!provider) {
    console.log(`   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ETH - RPC –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è ${getChainName(chainId)}`);
    return 0n;
  }

  try {
    const balance = await provider.getBalance(address);
    return balance;
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ ETH –≤ ${network}: ${error.message}`);
    return 0n;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–µ–π–±–ª–∫–æ–π–Ω–∞ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞
function getStablecoinForWallet(targetStablecoin, network) {
  if (targetStablecoin === 'random') {
    // –î–ª—è Base —Ç–æ–ª—å–∫–æ USDC –¥–æ—Å—Ç—É–ø–µ–Ω
    if (network === 'base') {
      return 'usdc';
    }
    
    // –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–µ—Ç–µ–π —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –º–µ–∂–¥—É USDT –∏ USDC
    const availableStablecoins = Object.keys(STABLECOIN_CONFIG[network]);
    const randomIndex = Math.floor(Math.random() * availableStablecoins.length);
    return availableStablecoins[randomIndex];
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–µ–π–±–ª–∫–æ–π–Ω–∞ –≤ —Å–µ—Ç–∏
  if (STABLECOIN_CONFIG[network] && STABLECOIN_CONFIG[network][targetStablecoin]) {
    return targetStablecoin;
  }
  
  // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–µ–π–±–ª–∫–æ–π–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
  const availableStablecoins = Object.keys(STABLECOIN_CONFIG[network]);
  return availableStablecoins[0] || 'usdc';
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è StableFix
async function main() {
  try {
    const config = getStableFixConfig();
    
    if (!config.enabled) {
      console.log('‚ùå StableFix –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
      return;
    }

    console.log('üîÑ –ó–∞–ø—É—Å–∫ StableFix');
    console.log(`üìä –ü—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è —Å–≤–∞–ø–∞: ${config.percentage}%`);
    console.log(`üéØ –¶–µ–ª–µ–≤–æ–π —Å—Ç–µ–π–±–ª–∫–æ–π–Ω: ${config.targetStablecoin}`);
    console.log(`üåê –°–µ—Ç–∏: ${config.networks.join(', ')}`);
    console.log('');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
    if (typeof global !== 'undefined' && global.bridgeStatus) {
      global.bridgeStatus.isRunning = true;
      global.bridgeStatus.startTime = new Date().toISOString();
      global.bridgeStatus.currentWallet = null;
      global.bridgeStatus.currentNetwork = null;
      global.bridgeStatus.progress = { completed: 0, total: 0 };
      global.bridgeStatus.stats = { successful: 0, failed: 0 };
      global.updateStatus?.(global.bridgeStatus);
    }

    // –ß–∏—Ç–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏
    const privateKeys = readPrivateKeys('keys.txt');
    
    if (privateKeys.length === 0) {
      console.error('‚ùå –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ keys.txt');
      return;
    }
    
    console.log(`üíº –ù–∞–π–¥–µ–Ω–æ ${privateKeys.length} –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏\n`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    if (typeof global !== 'undefined' && global.bridgeStatus) {
      global.bridgeStatus.progress.total = privateKeys.length;
      global.updateStatus?.(global.bridgeStatus);
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–æ—à–µ–ª–µ–∫
    for (let i = 0; i < privateKeys.length; i++) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
      if (typeof global !== 'undefined' && global.shouldStopStableFix && global.shouldStopStableFix()) {
        console.log('‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ StableFix –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
      }

      const privateKey = privateKeys[i];
      const address = getAddressFromPrivateKey(privateKey);
      
      if (!address) {
        console.log(`‚ùå –ö–æ—à–µ–ª–µ–∫ ${i + 1}/${privateKeys.length}: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á\n`);
        continue;
      }
      
      console.log(`üíº –ö–æ—à–µ–ª–µ–∫ ${i + 1}/${privateKeys.length}: ${address}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ—à–µ–ª—å–∫–∞ –≤ UI
      if (global.broadcastLog) {
        global.broadcastLog(`üíº –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—à–µ–ª—å–∫–∞ ${address} (${i + 1}/${privateKeys.length})`, 'info'); 
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ—à–µ–ª–µ–∫ –≤ —Å—Ç–∞—Ç—É—Å–µ
      if (typeof global !== 'undefined' && global.bridgeStatus) {
        global.bridgeStatus.currentWallet = address;
        global.bridgeStatus.currentNetwork = null;
        global.updateStatus?.(global.bridgeStatus);
      }
      
      try {
        const wallet = new ethers.Wallet(privateKey);
        let totalSwaps = 0;
        let successfulSwaps = 0;

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å–µ—Ç—å
        for (const network of config.networks) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
          if (typeof global !== 'undefined' && global.shouldStopStableFix && global.shouldStopStableFix()) {
            console.log('‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ StableFix –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            return;
          }

          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–µ—Ç–∏
          if (config.excludedNetworks.includes(network)) {
            console.log(`   üö´ –°–µ—Ç—å ${network.toUpperCase()} –∏—Å–∫–ª—é—á–µ–Ω–∞`);
            continue;
          }

          console.log(`\nüîó ${network.toUpperCase()}:`);
          console.log(`   üìç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥—Ä–µ—Å: ${wallet.address}`);

          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Ç—å –≤ —Å—Ç–∞—Ç—É—Å–µ
          if (typeof global !== 'undefined' && global.bridgeStatus) {
            global.bridgeStatus.currentNetwork = network;
            global.updateStatus?.(global.bridgeStatus);
          }

          // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å ETH
          const ethBalance = await getEthBalance(wallet.address, network);
          
                                if (ethBalance === 0n) {
                        console.log(`   ‚ö†Ô∏è –ù–µ—Ç ETH –≤ —Å–µ—Ç–∏ ${network.toUpperCase()}`);
                        continue;
                      } else {
                        console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω ETH –≤ —Å–µ—Ç–∏ ${network.toUpperCase()}`);
                      }

          const ethBalanceFormatted = (Number(ethBalance) / Math.pow(10, 18)).toFixed(6);
                                console.log(`   üí∞ –ë–∞–ª–∞–Ω—Å ETH: ${ethBalanceFormatted}`);

                      // –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É –¥–ª—è —Å–≤–∞–ø–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –≤ 99%
                      let swapAmount = (ethBalance * BigInt(config.percentage)) / 100n;
                      
                      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–æ 99% –æ—Ç –±–∞–ª–∞–Ω—Å–∞
                      const maxSwapAmount = (ethBalance * 99n) / 100n;
                      if (swapAmount > maxSwapAmount) {
                        swapAmount = maxSwapAmount;
                        console.log(`   ‚ö†Ô∏è –°—É–º–º–∞ —Å–≤–∞–ø–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –¥–æ 99% –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–∞–∑–∞`);
                      }
                      
                      const swapAmountFormatted = (Number(swapAmount) / Math.pow(10, 18)).toFixed(6);
                      const percentageUsed = (Number(swapAmount) / Number(ethBalance) * 100).toFixed(1);
                      console.log(`   üìä –°—É–º–º–∞ –¥–ª—è —Å–≤–∞–ø–∞ (${percentageUsed}%): ${swapAmountFormatted} ETH`);
          
          if (swapAmount === 0n) {
            console.log(`   ‚ö†Ô∏è –°—É–º–º–∞ –¥–ª—è —Å–≤–∞–ø–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞`);
            continue;
          }

          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–µ–π–±–ª–∫–æ–π–Ω –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
          const stablecoinType = getStablecoinForWallet(config.targetStablecoin, network);
          console.log(`   üéØ –¶–µ–ª–µ–≤–æ–π —Å—Ç–µ–π–±–ª–∫–æ–π–Ω: ${stablecoinType.toUpperCase()}`);

          // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–≤–∞–ø
          const isLastNetwork = network === config.networks[config.networks.length - 1];
          const swapResult = await swapEthToStablecoin(wallet, network, stablecoinType, swapAmount, !isLastNetwork);
          
          totalSwaps++;
          if (swapResult) {
            successfulSwaps++;
          }
        }

        console.log(`\n‚úÖ –ö–æ—à–µ–ª–µ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${successfulSwaps}/${totalSwaps} —Å–≤–∞–ø–æ–≤ —É—Å–ø–µ—à–Ω–æ\n`);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ—à–µ–ª—å–∫–∞ –≤ UI
        if (global.broadcastLog) {
          global.broadcastLog(`‚úÖ –ö–æ—à–µ–ª–µ–∫ ${address} –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${successfulSwaps}/${totalSwaps} —Å–≤–∞–ø–æ–≤ —É—Å–ø–µ—à–Ω–æ`, 'success');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if (typeof global !== 'undefined' && global.bridgeStatus) {
      global.bridgeStatus.progress.completed = i + 1;
      global.bridgeStatus.stats.successful += successfulSwaps;
      global.bridgeStatus.stats.failed += (totalSwaps - successfulSwaps);
      global.updateStatus?.(global.bridgeStatus);
    }

        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–æ—à–µ–ª—å–∫–∞–º–∏
        if (i < privateKeys.length - 1) {
          await new Promise(resolve => setTimeout(resolve, 5000));
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ—à–µ–ª—å–∫–∞: ${error.message}`);
        console.error('üìç –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –∫–æ—à–µ–ª—å–∫–∞–º–∏...\n');
      }
    }
    
    console.log('üéâ StableFix –∑–∞–≤–µ—Ä—à–µ–Ω');
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    if (typeof global !== 'undefined') {
      global.shouldStopStableFix = () => false;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if (typeof global !== 'undefined' && global.bridgeStatus) {
      global.bridgeStatus.isRunning = false;
      global.updateStatus?.(global.bridgeStatus);
    }
    
  } catch (error) {
    console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ StableFix: ${error.message}`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    if (typeof global !== 'undefined') {
      global.shouldStopStableFix = () => false;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏
    if (typeof global !== 'undefined' && global.bridgeStatus) {
      global.bridgeStatus.isRunning = false;
      global.updateStatus?.(global.bridgeStatus);
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ StableFix:', error);
    process.exit(1);
  });
}

module.exports = {
  main,
  swapEthToStablecoin,
  getEthBalance,
  getStablecoinForWallet,
  STABLECOIN_CONFIG
}; 