const { ethers } = require('ethers');
const fs = require('fs');
const path = require('path');
const { getRpcUrl, transactionDelay } = require('./bridge_executor.js');
const chainMapper = require('../utils/chainMapper.js');
const { getNativeTokenInfo } = require('../utils/nativeTokens.js');
const fallbackRpcConfig = require('../utils/fallbackRPC.json');

// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ RPC URL –¥–ª—è —Å–µ—Ç–∏ (–æ—Å–Ω–æ–≤–Ω–æ–π + fallback)
function getAllRpcUrls(chainId) {
  const urls = [];
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π RPC
  const mainRpcUrl = getRpcUrl(chainId);
  if (mainRpcUrl) {
    urls.push(mainRpcUrl);
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º fallback RPC
  const fallbackConfig = fallbackRpcConfig.fallbackRPC.find(item => item.chainId === chainId);
  if (fallbackConfig && fallbackConfig.fallbackUrls) {
    urls.push(...fallbackConfig.fallbackUrls);
  }
  
  return urls;
}

// –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–µ—Ç–∏
function getChainName(chainId) {
  const networkInfo = getNativeTokenInfo(chainId);
  return networkInfo ? networkInfo.name.toUpperCase() : `Chain ${chainId}`;
}

// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å fallback –ª–æ–≥–∏–∫–æ–π
async function createProviderWithFallback(chainId) {
  const urls = getAllRpcUrls(chainId);
  const chainName = getChainName(chainId);
  
  if (urls.length === 0) {
    console.log(`   ‚ùå RPC URL –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ${chainName}`);
    return null;
  }
  
  console.log(`   üîç –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${chainName} (${urls.length} RPC –¥–æ—Å—Ç—É–ø–Ω–æ)`);
  
  // –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π RPC –ø–æ –æ–¥–Ω–æ–º—É —Ä–∞–∑—É
  for (let i = 0; i < urls.length; i++) {
    const rpcUrl = urls[i];
    const isMainRpc = i === 0;
    
    try {
      console.log(`   üì° –ü–æ–ø—ã—Ç–∫–∞ ${i + 1}/${urls.length}: ${isMainRpc ? '–æ—Å–Ω–æ–≤–Ω–æ–π' : 'fallback'} RPC`);
      
      const provider = new ethers.JsonRpcProvider(rpcUrl);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      const networkPromise = provider.getNetwork();
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('Timeout')), 5000)
      );
      
      await Promise.race([networkPromise, timeoutPromise]);
      
      console.log(`   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${chainName} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (${isMainRpc ? '–æ—Å–Ω–æ–≤–Ω–æ–π' : 'fallback'} RPC)`);
      return provider;
      
    } catch (error) {
      console.log(`   ‚ùå RPC ${i + 1}/${urls.length} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
      
      // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π RPC, –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–ø—É—Å–∫ —Å–µ—Ç–∏
      if (i === urls.length - 1) {
        console.log(`   ‚ö†Ô∏è  –í—Å–µ RPC –¥–ª—è ${chainName} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ—Ç—å`);
        return null;
      }
    }
  }
  
  return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Å—É–±–∞–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
function readSubAccounts(filePath) {
  try {
    const fullPath = path.isAbsolute(filePath) ? filePath : path.join(__dirname, '..', filePath);
    const content = fs.readFileSync(fullPath, 'utf8');
    return content
      .split('\n')
      .map(line => line.trim())
      .filter(line => line && !line.startsWith('#'))
      .map(address => address.toLowerCase());
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—É–±–∞–∫–∞—É–Ω—Ç–æ–≤: ${error.message}`);
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π
function readPrivateKeys(filePath) {
  try {
    const fullPath = path.isAbsolute(filePath) ? filePath : path.join(__dirname, '..', filePath);
    const content = fs.readFileSync(fullPath, 'utf8');
    return content
      .split('\n')
      .map(line => line.trim())
      .filter(line => line && !line.startsWith('#'))
      .map(key => key.startsWith('0x') ? key : `0x${key}`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–ª—é—á–µ–π: ${error.message}`);
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ ETH
async function getEthBalance(wallet, chainId) {
  try {
    const provider = await createProviderWithFallback(chainId);
    if (!provider) {
      console.log(`   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ETH - RPC –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è ${getChainName(chainId)}`);
      return ethers.parseEther('0');
    }
    
    const balance = await provider.getBalance(wallet.address);
    return balance;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ${error.message}`);
    return ethers.parseEther('0');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—É–º–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞
function calculateTransferAmount(balance, transferPercent, isRandom = false, minPercent = 0, maxPercent = 0) {
  if (isRandom && minPercent > 0 && maxPercent > 0) {
    const randomPercent = Math.random() * (maxPercent - minPercent) + minPercent;
    return (balance * BigInt(Math.floor(randomPercent * 100))) / BigInt(10000);
  } else {
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ 100%, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥
    if (transferPercent === 100) {
      return 'MAX'; // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
    }
    return (balance * BigInt(Math.floor(transferPercent * 100))) / BigInt(10000);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞ (99.99% –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
function calculateMaxTransferAmount(balance) {
  try {
    // –ü–µ—Ä–µ–≤–æ–¥–∏–º 99.9% –±–∞–ª–∞–Ω—Å–∞, –æ—Å—Ç–∞–≤–ª—è—è 0.1% –¥–ª—è –∫–æ–º–∏—Å—Å–∏–∏
    const maxAmount = (balance * 999n) / 1000n;
    
    if (maxAmount <= 0n) {
      console.log(`   ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞`);
      return 0n;
    }
    
    const maxAmountFormatted = ethers.formatEther(maxAmount);
    const remainingFormatted = ethers.formatEther(balance - maxAmount);
    console.log(`   üí∏ –°—É–º–º–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (99.9%): ${maxAmountFormatted} ETH`);
    console.log(`   üí∞ –û—Å—Ç–∞—Ç–æ–∫ –¥–ª—è –∫–æ–º–∏—Å—Å–∏–∏ (0.1%): ${remainingFormatted} ETH`);
    
    return maxAmount;
    
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã: ${error.message}`);
    return 0n;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ ETH –Ω–∞ —Å—É–±–∞–∫–∞—É–Ω—Ç
async function transferEthToSubAccount(wallet, chainId, subAccountAddress, amount, targetChain, shouldDelayAfter = false, delayMinMs = 30000, delayMaxMs = 60000) {
  try {
    const provider = await createProviderWithFallback(chainId);
    if (!provider) {
      console.log(`   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ ETH - RPC –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è ${getChainName(chainId)}`);
      return false;
    }
    
    const signer = wallet.connect(provider);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π gas price
    const gasPrice = await provider.getFeeData();
    const gasPriceGwei = ethers.formatUnits(gasPrice.gasPrice, 'gwei');
    
    console.log(`   ‚õΩ Gas Price: ${gasPriceGwei} Gwei`);
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –≥–∞–∑–∞
    const txObject = {
      to: subAccountAddress,
      value: amount,
      from: wallet.address
    };
    
    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ—Ü–µ–Ω–∏–≤–∞–µ–º gas limit
    let gasLimit;
    try {
      gasLimit = await provider.estimateGas(txObject);
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –±—É—Ñ–µ—Ä –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ (10%)
      gasLimit = (gasLimit * 110n) / 100n;
      console.log(`   ‚õΩ –û—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞: ${gasLimit.toString()} units (—Å –±—É—Ñ–µ—Ä–æ–º 10%)`);
    } catch (error) {
      console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –≥–∞–∑–∞ (${error.message}), –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–∏–º–∏—Ç 21000`);
      gasLimit = 21000n; // Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –ª–∏–º–∏—Ç—É
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const fee = gasLimit * gasPrice.gasPrice;
    const feeFormatted = ethers.formatEther(fee);
    
    console.log(`   üí∞ –ö–æ–º–∏—Å—Å–∏—è –∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: ${feeFormatted} ETH`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤
    if (amount + fee > await provider.getBalance(wallet.address)) {
      console.log(`   ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (—É—á–∏—Ç—ã–≤–∞—è –∫–æ–º–∏—Å—Å–∏—é)`);
      return false;
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const tx = {
      to: subAccountAddress,
      value: amount,
      gasLimit: gasLimit,
      gasPrice: gasPrice.gasPrice
    };
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Ç–∏–≤–Ω–æ–º —Ç–æ–∫–µ–Ω–µ
    const tokenInfo = getNativeTokenInfo(targetChain);
    const tokenSymbol = tokenInfo ? tokenInfo.symbol : 'ETH';
    const tokenLogo = tokenInfo ? tokenInfo.logo_url : 'https://static.debank.com/image/coin/logo_url/eth/6443cdccced33e204d90cb723c632917.png';
    
            console.log(`   üí∏ –ü–µ—Ä–µ–≤–æ–¥ ${ethers.formatEther(amount)} ${tokenSymbol} –Ω–∞ —Å—É–±–∞–∫–∞—É–Ω—Ç ${subAccountAddress.slice(0, 6)}...${subAccountAddress.slice(-4)}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const transaction = await signer.sendTransaction(tx);
    
    // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const receipt = await transaction.wait();
    
    if (receipt.status === 1) {
      console.log(`   ‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω: ${transaction.hash}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ UI
      if (global.broadcastLog) {
        global.broadcastLog({
          type: 'token_operation',
          operation: 'transfer',
          data: {
            token: {
              symbol: tokenSymbol,
              amount: ethers.formatEther(amount),
              logo_url: tokenLogo,
              usd_value: '0' // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞
            },
            chain: targetChain.toUpperCase(),
            target: '—Å—É–±–∞–∫–∞—É–Ω—Ç',
            status: 'success',
            hash: transaction.hash,
            from: wallet.address,
            to: subAccountAddress
          }
        }, 'success');
      }
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
      if (shouldDelayAfter) {
        const delay = Math.floor(Math.random() * (delayMaxMs - delayMinMs + 1)) + delayMinMs;
        console.log(`   ‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏: ${delay/1000} —Å–µ–∫`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –æ –∑–∞–¥–µ—Ä–∂–∫–µ –≤ UI
        if (global.broadcastLog) {
          global.broadcastLog(`‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏: ${delay/1000} —Å–µ–∫`, 'info');
        }
        
        await new Promise(resolve => setTimeout(resolve, delay));
      }
      
      return true;
    } else {
      console.log(`   ‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞`);
      return false;
    }
    
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: ${error.message}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –æ—à–∏–±–∫–∏ –≤ UI
    if (global.broadcastLog) {
            global.broadcastLog({
        type: 'token_operation',
        operation: 'transfer',
        data: {
          token: {
            symbol: tokenSymbol,
            amount: ethers.formatEther(amount),
            logo_url: tokenLogo,
            usd_value: '0'
          },
          chain: targetChain.toUpperCase(),
          target: '—Å—É–±–∞–∫–∞—É–Ω—Ç',
          status: 'error',
          error: error.message,
          from: wallet.address,
          to: subAccountAddress
        }
      }, 'error');
    }
    
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ ETH
async function collectEthToSubAccounts(config) {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –Ω–∞—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —Å—É–±–∞–∫–∞—É–Ω—Ç—ã\n');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –æ –Ω–∞—á–∞–ª–µ —Å–±–æ—Ä–∞ –≤ UI
    if (global.broadcastLog) {
      global.broadcastLog('üöÄ –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –Ω–∞—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —Å—É–±–∞–∫–∞—É–Ω—Ç—ã', 'info');
    }
    
    // –ß–∏—Ç–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –∏ —Å—É–±–∞–∫–∞—É–Ω—Ç—ã
    const privateKeys = readPrivateKeys('keys.txt');
    const subAccounts = readSubAccounts('sub_accs.txt');
    
    if (privateKeys.length === 0) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –≤ keys.txt');
      return;
    }
    
    if (subAccounts.length === 0) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—É–±–∞–∫–∞—É–Ω—Ç—ã –≤ sub_accs.txt');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª—é—á–µ–π –∏ —Å—É–±–∞–∫–∞—É–Ω—Ç–æ–≤
    if (privateKeys.length !== subAccounts.length) {
      console.log(`‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π (${privateKeys.length}) –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—É–±–∞–∫–∞—É–Ω—Ç–æ–≤ (${subAccounts.length})`);
      return;
    }
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${privateKeys.length} –∫–æ—à–µ–ª—å–∫–æ–≤ –∏ ${subAccounts.length} —Å—É–±–∞–∫–∞—É–Ω—Ç–æ–≤\n`);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
    const transferPercent = config.transferPercent || 100; // –ü—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    const isRandom = config.isRandom || false; // –°–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç
    const minPercent = config.minPercent || 0; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    const maxPercent = config.maxPercent || 0; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–µ—Ä–∂–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞
    const delayMinMs = config.delayMinMs || 30000; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
    const delayMaxMs = config.delayMaxMs || 60000; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
    const walletDelayMinMs = config.walletDelayMinMs || 120000; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–æ—à–µ–ª—å–∫–∞–º–∏
    const walletDelayMaxMs = config.walletDelayMaxMs || 300000; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–æ—à–µ–ª—å–∫–∞–º–∏
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ç–∏ –¥–ª—è —Å–±–æ—Ä–∞
    let networksToCollect = [];
    
    if (Array.isArray(config.selectedNetworks) && config.selectedNetworks.length > 0) {
      // –°–æ–±–∏—Ä–∞–µ–º –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–µ—Ç–µ–π
      networksToCollect = config.selectedNetworks;
      console.log(`üåê –í—ã–±—Ä–∞–Ω–æ ${networksToCollect.length} —Å–µ—Ç–µ–π –¥–ª—è —Å–±–æ—Ä–∞`);
    } else {
      // –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π - –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É
      console.log(`‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω—ã —Å–µ—Ç–∏ –¥–ª—è —Å–±–æ—Ä–∞`);
      return;
    }
    
    console.log(`‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±–æ—Ä–∞:`);
    if (isRandom) {
      console.log(`   üìä –°–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: ${minPercent}% - ${maxPercent}%`);
    } else {
      console.log(`   üìä –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: ${transferPercent}%`);
    }
    console.log(`   üåê –°–µ—Ç–∏ –¥–ª—è —Å–±–æ—Ä–∞: ${networksToCollect.map(network => network.toUpperCase()).join(', ')}`);
    console.log(`   ‚õΩ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞: –≤–∫–ª—é—á–µ–Ω–∞`);
    console.log(`   ‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏: ${delayMinMs/1000}-${delayMaxMs/1000} —Å–µ–∫`);
    console.log(`   ‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–æ—à–µ–ª—å–∫–∞–º–∏: ${walletDelayMinMs/1000}-${walletDelayMaxMs/1000} —Å–µ–∫\n`);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–æ—à–µ–ª–µ–∫
    for (let i = 0; i < privateKeys.length; i++) {
      try {
        const privateKey = privateKeys[i];
        const subAccountAddress = subAccounts[i];
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ—à–µ–ª–µ–∫
        const wallet = new ethers.Wallet(privateKey);
        console.log(`üîë –ö–æ—à–µ–ª–µ–∫ ${i + 1}/${privateKeys.length}: ${wallet.address}`);
        console.log(`üì• –°—É–±–∞–∫–∞—É–Ω—Ç: ${subAccountAddress}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –∫–∞–∂–¥–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ç–∏
        for (const targetChain of networksToCollect) {
          try {
            console.log(`\nüåê –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç—å: ${targetChain.toUpperCase()}`);
            
            // –ü–æ–ª—É—á–∞–µ–º chainId –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ç–∏
            const chainId = chainMapper.getChainId(targetChain);
            if (!chainId) {
              console.log(`   ‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å–µ—Ç—å: ${targetChain}`);
              continue;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Ç–∏–≤–Ω–æ–º —Ç–æ–∫–µ–Ω–µ
            const tokenInfo = getNativeTokenInfo(targetChain);
            const tokenSymbol = tokenInfo ? tokenInfo.symbol : 'ETH';
            
            // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ç–∏
            const balance = await getEthBalance(wallet, chainId);
            const balanceFormatted = ethers.formatEther(balance);
            
            console.log(`üí∞ –ë–∞–ª–∞–Ω—Å ${tokenSymbol} –≤ ${targetChain.toUpperCase()}: ${balanceFormatted}`);
            
            if (balance === 0n) {
              console.log(`   ‚ö†Ô∏è –ù—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
              continue;
            }
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
            let transferAmount = calculateTransferAmount(balance, transferPercent, isRandom, minPercent, maxPercent);
            
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è 100% –ø–µ—Ä–µ–≤–æ–¥–∞
            if (transferAmount === 'MAX') {
              console.log(`üí∏ –ü–µ—Ä–µ–≤–æ–¥ 100% –±–∞–ª–∞–Ω—Å–∞ (99.9% –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)`);
              // –î–ª—è 100% –ø–µ—Ä–µ–≤–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º 99.9% –±–∞–ª–∞–Ω—Å–∞, –æ—Å—Ç–∞–≤–ª—è—è 0.1% –¥–ª—è –∫–æ–º–∏—Å—Å–∏–∏
              transferAmount = calculateMaxTransferAmount(balance);
            } else {
              const transferAmountFormatted = ethers.formatEther(transferAmount);
              console.log(`üí∏ –°—É–º–º–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: ${transferAmountFormatted} ${tokenSymbol} –≤ ${targetChain.toUpperCase()}`);
            }
            
            if (transferAmount === 0n) {
              console.log(`   ‚ö†Ô∏è –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ä–∞–≤–Ω–∞ 0, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
              continue;
            }
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∏
            const success = await transferEthToSubAccount(wallet, chainId, subAccountAddress, transferAmount, targetChain, true, delayMinMs, delayMaxMs);
            
            if (success) {
              console.log(`   ‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –≤ ${targetChain.toUpperCase()} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
              
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ –≤ UI
              if (global.broadcastLog) {
                global.broadcastLog(`‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –≤ ${targetChain.toUpperCase()} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`, 'success');
              }
            } else {
              console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –≤ ${targetChain.toUpperCase()}`);
              
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –æ–± –æ—à–∏–±–∫–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ UI
              if (global.broadcastLog) {
                global.broadcastLog(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –≤ ${targetChain.toUpperCase()}`, 'error');
              }
            }
            
          } catch (error) {
            console.error(`   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ç–∏ ${targetChain}: ${error.message}`);
          }
        }
        
        console.log(`\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—à–µ–ª—å–∫–∞ ${i + 1} –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ—à–µ–ª—å–∫–∞ –≤ UI
        if (global.broadcastLog) {
          global.broadcastLog(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—à–µ–ª—å–∫–∞ ${i + 1} –∑–∞–≤–µ—Ä—à–µ–Ω–∞`, 'success');
        }
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–æ—à–µ–ª—å–∫–∞–º–∏ (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ—à–µ–ª–µ–∫)
        if (i < privateKeys.length - 1) {
          const walletDelay = Math.floor(Math.random() * (walletDelayMaxMs - walletDelayMinMs + 1)) + walletDelayMinMs;
          console.log(`‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–æ—à–µ–ª—å–∫–∞–º–∏: ${walletDelay/1000} —Å–µ–∫`);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –æ –∑–∞–¥–µ—Ä–∂–∫–µ –º–µ–∂–¥—É –∫–æ—à–µ–ª—å–∫–∞–º–∏ –≤ UI
          if (global.broadcastLog) {
            global.broadcastLog(`‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–æ—à–µ–ª—å–∫–∞–º–∏: ${walletDelay/1000} —Å–µ–∫`, 'info');
          }
          
          await new Promise(resolve => setTimeout(resolve, walletDelay));
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ—à–µ–ª—å–∫–∞ ${i + 1}: ${error.message}\n`);
      }
    }
    
    console.log('üéâ –°–±–æ—Ä –Ω–∞—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —Å—É–±–∞–∫–∞—É–Ω—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–±–æ—Ä–∞ –≤ UI
    if (global.broadcastLog) {
      global.broadcastLog('üéâ –°–±–æ—Ä –Ω–∞—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —Å—É–±–∞–∫–∞—É–Ω—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω', 'success');
    }
    
  } catch (error) {
    console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –æ–± –æ—à–∏–±–∫–µ –≤ UI
    if (global.broadcastLog) {
      global.broadcastLog(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'error');
    }
  }
}

module.exports = {
  collectEthToSubAccounts,
  readSubAccounts,
  readPrivateKeys,
  getEthBalance,
  calculateTransferAmount,
  calculateMaxTransferAmount,
  transferEthToSubAccount
}; 