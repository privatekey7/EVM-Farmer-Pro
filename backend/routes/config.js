const express = require('express');
const fs = require('fs-extra');
const path = require('path');
const router = express.Router();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ –ø–∞–º—è—Ç–∏
let memoryConfig = null;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const DEFAULT_CONFIG = {
  collection: {
    mode: 'collect_to_target',
    targetNetwork: 'base'
  },
  excludedNetworks: [],
  transaction: {
    delayMinMs: 60000,
    delayMaxMs: 120000,
    walletDelayMinMs: 120000,
    walletDelayMaxMs: 300000
  }
};

// –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const validateConfig = (config) => {
  const errors = [];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É collection
  if (!config.collection || typeof config.collection !== 'object') {
    errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è collection');
  } else {
    const { mode, targetNetwork } = config.collection;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º
    if (!['collect_to_target', 'swap_to_native'].includes(mode)) {
      errors.push('–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å collect_to_target –∏–ª–∏ swap_to_native)');
    }
    
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–µ–≤—É—é —Å–µ—Ç—å
  if (mode === 'collect_to_target') {
    const targetNetworks = config.collection?.targetNetworks || [];
    if (targetNetworks.length === 0 && !targetNetwork) {
      errors.push('–î–ª—è —Ä–µ–∂–∏–º–∞ collect_to_target —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å targetNetwork –∏–ª–∏ targetNetworks');
    }
  }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–µ—Ç–∏
  if (config.excludedNetworks && !Array.isArray(config.excludedNetworks)) {
    errors.push('excludedNetworks –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  if (config.transaction) {
    const { delayMinMs, delayMaxMs, walletDelayMinMs, walletDelayMaxMs } = config.transaction;
    
    if (delayMinMs !== undefined && (typeof delayMinMs !== 'number' || delayMinMs < 0)) {
      errors.push('delayMinMs –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
    }
    if (delayMaxMs !== undefined && (typeof delayMaxMs !== 'number' || delayMaxMs < 0)) {
      errors.push('delayMaxMs –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
    }
    if (delayMinMs !== undefined && delayMaxMs !== undefined && delayMinMs > delayMaxMs) {
      errors.push('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π');
    }
    
    if (walletDelayMinMs !== undefined && (typeof walletDelayMinMs !== 'number' || walletDelayMinMs < 0)) {
      errors.push('walletDelayMinMs –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
    }
    if (walletDelayMaxMs !== undefined && (typeof walletDelayMaxMs !== 'number' || walletDelayMaxMs < 0)) {
      errors.push('walletDelayMaxMs –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
    }
    if (walletDelayMinMs !== undefined && walletDelayMaxMs !== undefined && walletDelayMinMs > walletDelayMaxMs) {
      errors.push('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π');
    }
  }
  
  return errors;
};

// GET /api/config - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
router.get('/', async (req, res) => {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–∞–º—è—Ç–∏ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const config = memoryConfig || DEFAULT_CONFIG;
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    const metadata = {
      source: memoryConfig ? 'memory' : 'default',
      lastModified: new Date().toISOString()
    };
    
    res.json({
      success: true,
      config,
      metadata
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
      details: error.message 
    });
  }
});

// POST /api/config - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
router.post('/', async (req, res) => {
  try {
    const newConfig = req.body;

    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const validationErrors = validateConfig(newConfig);
    if (validationErrors.length > 0) {
      return res.status(400).json({
        error: '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
        details: validationErrors
      });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –ø–∞–º—è—Ç–∏
    memoryConfig = { ...newConfig };
    console.log('üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ø–∞–º—è—Ç—å:', {
      mode: memoryConfig.collection?.mode,
      targetNetworks: memoryConfig.collection?.targetNetworks,
      targetNetwork: memoryConfig.collection?.targetNetwork // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ —á–µ—Ä–µ–∑ WebSocket
    if (global.broadcastLog) {
      global.broadcastLog('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', 'success');
    }
    
    res.json({
      success: true,
      message: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞',
      config: newConfig
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
    
    if (global.broadcastLog) {
      global.broadcastLog(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${error.message}`, 'error');
    }
    
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
      details: error.message 
    });
  }
});


// GET /api/config/validate - –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
router.post('/validate', (req, res) => {
  try {
    const config = req.body;
    const errors = validateConfig(config);
    
    res.json({
      success: true,
      valid: errors.length === 0,
      errors
    });
    
  } catch (error) {
    res.status(400).json({
      success: false,
      valid: false,
      errors: [`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${error.message}`]
    });
  }
});

// DELETE /api/config - —Å–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
router.delete('/', async (req, res) => {
  try {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –ø–∞–º—è—Ç–∏
    memoryConfig = null;
    
    console.log('üîÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ —á–µ—Ä–µ–∑ WebSocket
    if (global.broadcastLog) {
      global.broadcastLog('üîÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é', 'info');
    }
    
    res.json({
      success: true,
      message: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
      config: DEFAULT_CONFIG
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
      details: error.message 
    });
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö)
const getCurrentConfig = () => {
  const config = memoryConfig || DEFAULT_CONFIG;
  return config;
};

module.exports = { router, getCurrentConfig }; 