const express = require('express');
const fs = require('fs-extra');
const path = require('path');
const { ethers } = require('ethers');
const { getCurrentConfig } = require('./config');
const router = express.Router();

// –ò–º–ø–æ—Ä—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–≤—Ç–æ–±—Ä–∏–¥–∂–µ—Ä–∞
const bridgeExecutor = require('../../src/bridge_executor');
const { checkBalance } = require('../../src/debank_balance_checker');
const puppeteer = require('puppeteer');
const { walletDelay } = require('../../utils/delay');

// –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
let isRunning = false;
let currentProcess = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –æ–¥–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
const getTokenBalancesForAddress = async (address) => {
  let browser;
  try {
    browser = await puppeteer.launch({ 
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    const balances = await checkBalance(address, browser);
    return balances;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤:', error);
    throw error;
  } finally {
    if (browser) {
      await browser.close();
    }
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π
const readPrivateKeys = async () => {
  const KEYS_PATH = path.join(__dirname, '../../keys.txt');
  
  try {
    const content = await fs.readFile(KEYS_PATH, 'utf8');
    const lines = content.split('\n')
      .map(line => line.trim())
      .filter(line => line.length > 0 && !line.startsWith('#'));
    
    const wallets = [];
    for (const privateKey of lines) {
      try {
        const wallet = new ethers.Wallet(privateKey);
        wallets.push({
          address: wallet.address,
          privateKey: privateKey
        });
      } catch (error) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∫–ª—é—á–∏
      }
    }
    
    return wallets;
  } catch (error) {
    throw new Error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è keys.txt: ${error.message}`);
  }
};

// GET /api/bridge/status - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–±—Ä–∏–¥–∂–µ—Ä–∞
router.get('/status', (req, res) => {
  res.json({
    success: true,
    status: global.bridgeStatus
  });
});

// POST /api/bridge/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–±—Ä–∏–¥–∂–µ—Ä
router.post('/start', async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –ø—Ä–æ—Ü–µ—Å—Å
    if (isRunning) {
      return res.status(409).json({
        success: false,
        error: '–ê–≤—Ç–æ–±—Ä–∏–¥–∂–µ—Ä —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ—à–µ–ª—å–∫–æ–≤
    const wallets = await readPrivateKeys();
    if (wallets.length === 0) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –≤ keys.txt'
      });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–∞–º—è—Ç–∏
    const config = getCurrentConfig();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–∑–∞–ø—É—â–µ–Ω"
    isRunning = true;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    global.updateStatus({
      isRunning: true,
      startTime: new Date().toISOString(),
      currentWallet: null,
      currentNetwork: null,
      progress: { completed: 0, total: wallets.length },
      stats: { successful: 0, failed: 0 }
    });
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    let modeText = '–ê–≤—Ç–æ–±—Ä–∏–¥–∂–µ—Ä';
    
    if (config.collection?.mode === 'collect_to_target') {
      modeText = '–°–æ–±—Ä–∞—Ç—å –≤—Å—ë –≤ –æ–¥–Ω—É —Å–µ—Ç—å';
    } else if (config.collection?.mode === 'swap_to_native') {
      modeText = '–°–≤–∞–ø—ã –≤ –Ω–∞—Ç–∏–≤–∫—É';
    }
    
    global.broadcastLog(`üöÄ ${modeText}`, 'info');
    global.broadcastLog(`üíº –ù–∞–π–¥–µ–Ω–æ ${wallets.length} –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`, 'info');
    
    res.json({
      success: true,
      message: '–ê–≤—Ç–æ–±—Ä–∏–¥–∂–µ—Ä –∑–∞–ø—É—â–µ–Ω',
      wallets: wallets.length
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
    runBridgeProcess(wallets, config);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–±—Ä–∏–¥–∂–µ—Ä–∞:', error);
    isRunning = false;
    
    global.updateStatus({
      isRunning: false
    });
    
    global.broadcastLog(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${error.message}`, 'error');
    
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–±—Ä–∏–¥–∂–µ—Ä–∞',
      details: error.message
    });
  }
});

// POST /api/bridge/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–±—Ä–∏–¥–∂–µ—Ä
router.post('/stop', (req, res) => {
  try {
    if (!isRunning) {
      return res.status(409).json({
        success: false,
        error: '–ê–≤—Ç–æ–±—Ä–∏–¥–∂–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω'
      });
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    isRunning = false;
    
    global.updateStatus({
      isRunning: false
    });
    
    global.broadcastLog('‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–±—Ä–∏–¥–∂–µ—Ä–∞', 'warning');
    
    res.json({
      success: true,
      message: '–°–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–±—Ä–∏–¥–∂–µ—Ä–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–±—Ä–∏–¥–∂–µ—Ä–∞',
      details: error.message
    });
  }
});

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–±—Ä–∏–¥–∂–µ—Ä–∞
const runBridgeProcess = async (wallets, config) => {
  try {
    
    for (let i = 0; i < wallets.length; i++) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
      if (!isRunning) {
        global.broadcastLog('‚èπÔ∏è –ê–≤—Ç–æ–±—Ä–∏–¥–∂–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', 'warning');
        break;
      }
      
      const wallet = wallets[i];
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
      global.updateStatus({
        currentWallet: wallet.address,
        currentNetwork: null,
        progress: { completed: i, total: wallets.length }
      });
      
      global.broadcastLog(`üîÑ –ö–æ—à–µ–ª–µ–∫ ${i + 1}/${wallets.length}: ${wallet.address}`, 'info');
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –∫–æ—à–µ–ª—å–∫–∞
        global.broadcastLog('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤...', 'info');
        const balances = await getTokenBalancesForAddress(wallet.address);
        
        if (!balances || balances.length === 0) {
          global.broadcastLog('‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –∫–æ—à–µ–ª–µ–∫ –ø—É—Å—Ç', 'warning');
          global.bridgeStatus.stats.failed++;
          continue;
        }
        
        global.broadcastLog('‚úÖ –ë–∞–ª–∞–Ω—Å—ã –ø–æ–ª—É—á–µ–Ω—ã', 'success');
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –∞–≤—Ç–æ–±—Ä–∏–¥–∂–µ—Ä–∞
        const walletData = {
          address: wallet.address,
          privateKey: wallet.privateKey,
          balances: balances
        };
        
        global.broadcastLog('üåâ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–±—Ä–∏–¥–∂–µ—Ä–∞...', 'info');
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è bridge_executor
        global.shouldStop = () => !isRunning;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        global.getConfig = () => config;
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–±—Ä–∏–¥–∂–µ—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
        await bridgeExecutor.main([walletData]);
        
        global.broadcastLog(`‚úÖ –ö–æ—à–µ–ª–µ–∫ ${wallet.address} –æ–±—Ä–∞–±–æ—Ç–∞–Ω`, 'success');
        global.bridgeStatus.stats.successful++;
        
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ—à–µ–ª—å–∫–∞ ${wallet.address}:`, error);
        global.broadcastLog(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ—à–µ–ª—å–∫–∞: ${error.message}`, 'error');
        global.bridgeStatus.stats.failed++;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      global.updateStatus({
        progress: { completed: i + 1, total: wallets.length }
      });
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–æ—à–µ–ª—å–∫–∞–º–∏
      if (i < wallets.length - 1 && isRunning) {
        await walletDelay();
      }
    }
    
    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    isRunning = false;
    
    const completedWallets = global.bridgeStatus.progress.completed;
    const successfulOps = global.bridgeStatus.stats.successful;
    const failedOps = global.bridgeStatus.stats.failed;
    
    global.updateStatus({
      isRunning: false,
      currentWallet: null,
      currentNetwork: null
    });
    
    global.broadcastLog('üéâ –ê–≤—Ç–æ–±—Ä–∏–¥–∂–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω', 'success');
    global.broadcastLog(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${completedWallets} –∫–æ—à–µ–ª—å–∫–æ–≤, ${successfulOps} —É—Å–ø–µ—à–Ω–æ, ${failedOps} –æ—à–∏–±–æ–∫`, 'info');
    
    // –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    global.shouldStop = null;
    global.getConfig = null;
    
  } catch (error) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ–±—Ä–∏–¥–∂–µ—Ä–∞:', error);
    isRunning = false;
    
    global.updateStatus({
      isRunning: false,
      currentWallet: null,
      currentNetwork: null
    });
    
    global.broadcastLog(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'error');
    
    // –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    global.shouldStop = null;
    global.getConfig = null;
  }
};

// GET /api/bridge/logs - –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ WebSocket)
router.get('/logs', (req, res) => {
  const { limit = 100, offset = 0 } = req.query;
  
  const logs = global.bridgeStatus.logs || [];
  const startIndex = Math.max(0, logs.length - offset - limit);
  const endIndex = logs.length - offset;
  
  res.json({
    success: true,
    logs: logs.slice(startIndex, endIndex),
    total: logs.length,
    offset: parseInt(offset),
    limit: parseInt(limit)
  });
});

// POST /api/bridge/test - —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
router.post('/test', async (req, res) => {
  try {
    const { address } = req.body;
    
    if (!address) {
      return res.status(400).json({
        success: false,
        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞'
      });
    }
    
    if (!ethers.isAddress(address)) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –ø—Ä–æ—Ü–µ—Å—Å
    if (isRunning) {
      return res.status(409).json({
        success: false,
        error: '–ê–≤—Ç–æ–±—Ä–∏–¥–∂–µ—Ä —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'
      });
    }
    
    // –ò—â–µ–º –∫–æ—à–µ–ª–µ–∫ –≤ keys.txt
    const wallets = await readPrivateKeys();
    const targetWallet = wallets.find(w => w.address.toLowerCase() === address.toLowerCase());
    
    if (!targetWallet) {
      return res.status(404).json({
        success: false,
        error: '–ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ keys.txt'
      });
    }
    
    global.broadcastLog(`üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ ${address}`, 'info');
    
    res.json({
      success: true,
      message: '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –Ω–∞—á–∞—Ç',
      wallet: address
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å
    runBridgeProcess([targetWallet]);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞',
      details: error.message
    });
  }
});

// GET /api/bridge/history - –∏—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
router.get('/history', (req, res) => {
  res.json({
    success: true,
    history: [],
    message: '–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞'
  });
});

module.exports = router; 