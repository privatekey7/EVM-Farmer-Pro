const express = require('express');
const fs = require('fs-extra');
const path = require('path');
const { ethers } = require('ethers');
const router = express.Router();

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∫–ª—é—á–∞–º–∏
const KEYS_PATH = path.join(__dirname, '../../keys.txt');

// –ò–º–ø–æ—Ä—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–∫—Ä–µ–π–ø–µ—Ä–∞ –±–∞–ª–∞–Ω—Å–æ–≤
const { checkBalance } = require('../../src/debank_balance_checker');
const puppeteer = require('puppeteer');

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –æ–¥–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
async function getTokenBalancesForAddress(address) {
  let browser;
  try {
    browser = await puppeteer.launch({ 
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    const balances = await checkBalance(address, browser);
    return balances;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤:', error);
    throw error;
  } finally {
    if (browser) {
      await browser.close();
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π
const readPrivateKeys = async () => {
  try {
    const exists = await fs.pathExists(KEYS_PATH);
    if (!exists) {
      return { success: false, error: '–§–∞–π–ª keys.txt –Ω–µ –Ω–∞–π–¥–µ–Ω' };
    }
    
    const content = await fs.readFile(KEYS_PATH, 'utf8');
    const lines = content.split('\n')
      .map(line => line.trim())
      .filter(line => line.length > 0 && !line.startsWith('#')); // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    
    if (lines.length === 0) {
      return { success: false, error: '–§–∞–π–ª keys.txt –ø—É—Å—Ç' };
    }
    
    const wallets = [];
    const errors = [];
    
    for (let i = 0; i < lines.length; i++) {
      const privateKey = lines[i];
      
      try {
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
        const wallet = new ethers.Wallet(privateKey);
        wallets.push({
          index: i + 1,
          address: wallet.address,
          privateKey: privateKey
        });
      } catch (error) {
        errors.push(`–°—Ç—Ä–æ–∫–∞ ${i + 1}: –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á`);
      }
    }
    
    return { 
      success: true, 
      wallets, 
      errors,
      totalKeys: lines.length,
      validKeys: wallets.length
    };
    
  } catch (error) {
    return { 
      success: false, 
      error: `–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${error.message}` 
    };
  }
};

// GET /api/wallets - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤
router.get('/', async (req, res) => {
  try {
    const result = await readPrivateKeys();
    
    if (!result.success) {
      return res.status(404).json(result);
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å–∞ –∏ –∏–Ω–¥–µ–∫—Å—ã (–±–µ–∑ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π)
    const walletsInfo = result.wallets.map(wallet => ({
      index: wallet.index,
      address: wallet.address,
      balanceUSD: null, // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
      lastUpdated: null
    }));
    
    res.json({
      success: true,
      wallets: walletsInfo,
      stats: {
        total: result.totalKeys,
        valid: result.validKeys,
        invalid: result.totalKeys - result.validKeys
      },
      errors: result.errors,
      fileInfo: {
        path: KEYS_PATH,
        exists: true,
        lastModified: (await fs.stat(KEYS_PATH)).mtime
      }
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤:', error);
    res.status(500).json({ 
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ—à–µ–ª—å–∫–æ–≤',
      details: error.message 
    });
  }
});

// POST /api/wallets/validate - –≤–∞–ª–∏–¥–∞—Ü–∏—è keys.txt –±–µ–∑ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
router.post('/validate', async (req, res) => {
  try {
    const result = await readPrivateKeys();
    
    res.json({
      success: true,
      valid: result.success && result.errors.length === 0,
      stats: result.success ? {
        total: result.totalKeys,
        valid: result.validKeys,
        invalid: result.totalKeys - result.validKeys
      } : null,
      errors: result.success ? result.errors : [result.error]
    });
    
  } catch (error) {
    res.status(500).json({ 
      success: false,
      valid: false,
      errors: [`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error.message}`]
    });
  }
});

// GET /api/wallets/:address/balances - –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
router.get('/:address/balances', async (req, res) => {
  try {
    const { address } = req.params;
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å
    if (!ethers.isAddress(address)) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞'
      });
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –æ –Ω–∞—á–∞–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
    if (global.broadcastLog) {
      global.broadcastLog(`üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è ${address}`, 'info');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
    const balances = await getTokenBalancesForAddress(address);
    
    if (!balances || balances.length === 0) {
      return res.status(404).json({
        success: false,
        error: '–ë–∞–ª–∞–Ω—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –∫–æ—à–µ–ª–µ–∫ –ø—É—Å—Ç'
      });
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ USD
    let totalUSD = 0;
    const processedBalances = [];
    
    for (const balanceData of balances) {
      if (balanceData.data && balanceData.data.data) {
        for (const token of balanceData.data.data) {
          const usdValue = token.amount * (token.price || 0);
          totalUSD += usdValue;
          
          processedBalances.push({
            chain: token.chain,
            symbol: token.symbol,
            amount: token.amount,
            price: token.price || 0,
            usdValue: usdValue,
            isNative: token.is_core && !token.id.startsWith('0x'),
            address: token.id.startsWith('0x') ? token.id : null,
            logo_url: token.logo_url || token.logo || null
          });
        }
      }
    }
    
    if (global.broadcastLog) {
      global.broadcastLog(`‚úÖ –ë–∞–ª–∞–Ω—Å—ã –ø–æ–ª—É—á–µ–Ω—ã: $${totalUSD.toFixed(2)}`, 'success');
    }
    
    res.json({
      success: true,
      balances: processedBalances,
      totalUSD,
      cached: false,
      lastUpdated: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤:', error);
    
    if (global.broadcastLog) {
      global.broadcastLog(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: ${error.message}`, 'error');
    }
    
    res.status(500).json({ 
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤',
      details: error.message 
    });
  }
});

// POST /api/wallets/refresh-all - –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
router.post('/refresh-all', async (req, res) => {
  try {
    const result = await readPrivateKeys();
    
    if (!result.success) {
      return res.status(404).json(result);
    }
    
    if (global.broadcastLog) {
      global.broadcastLog(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è ${result.wallets.length} –∫–æ—à–µ–ª—å–∫–æ–≤`, 'info');
    }
    
    const results = [];
    let totalUSD = 0;
    
    for (const wallet of result.wallets) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
        const balances = await getTokenBalancesForAddress(wallet.address);
        
        let walletUSD = 0;
        if (balances && balances.length > 0) {
          for (const balanceData of balances) {
            if (balanceData.data && balanceData.data.data) {
              for (const token of balanceData.data.data) {
                walletUSD += token.amount * (token.price || 0);
              }
            }
          }
        }
        
        totalUSD += walletUSD;
        results.push({
          address: wallet.address,
          balanceUSD: walletUSD,
          success: true
        });
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
        
      } catch (error) {
        results.push({
          address: wallet.address,
          balanceUSD: 0,
          success: false,
          error: error.message
        });
      }
    }
    
    if (global.broadcastLog) {
      global.broadcastLog(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: $${totalUSD.toFixed(2)}`, 'success');
    }
    
    res.json({
      success: true,
      results,
      summary: {
        totalWallets: result.wallets.length,
        successful: results.filter(r => r.success).length,
        failed: results.filter(r => !r.success).length,
        totalUSD
      }
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
    
    if (global.broadcastLog) {
      global.broadcastLog(`‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${error.message}`, 'error');
    }
    
    res.status(500).json({ 
      success: false,
      error: '–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤',
      details: error.message 
    });
  }
});

// GET /api/wallets/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –∫–æ—à–µ–ª—å–∫–∞–º
router.get('/stats', async (req, res) => {
  try {
    const result = await readPrivateKeys();
    
    if (!result.success) {
      return res.status(404).json(result);
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫–æ—à–µ–ª—å–∫–æ–≤
    res.json({
      success: true,
      stats: {
        totalWallets: result.wallets.length,
        validWallets: result.validKeys,
        invalidWallets: result.totalKeys - result.validKeys
      }
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({ 
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
      details: error.message 
    });
  }
});

module.exports = router; 